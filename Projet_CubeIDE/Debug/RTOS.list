
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e98  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08004070  08004070  00005070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040c4  080040c4  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  080040c4  080040c4  000050c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040cc  080040cc  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040cc  080040cc  000050cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080040d0  080040d0  000050d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080040d4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000068  0800413c  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  0800413c  0000626c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d807  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021d3  00000000  00000000  0001389f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  00015a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000856  00000000  00000000  00016570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e061  00000000  00000000  00016dc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dcd3  00000000  00000000  00034e27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8761  00000000  00000000  00042afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb25b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003174  00000000  00000000  000fb2a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000fe414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004058 	.word	0x08004058

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	08004058 	.word	0x08004058

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	@ 0x28
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051e:	4b2b      	ldr	r3, [pc, #172]	@ (80005cc <MX_GPIO_Init+0xc4>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000522:	4a2a      	ldr	r2, [pc, #168]	@ (80005cc <MX_GPIO_Init+0xc4>)
 8000524:	f043 0304 	orr.w	r3, r3, #4
 8000528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052a:	4b28      	ldr	r3, [pc, #160]	@ (80005cc <MX_GPIO_Init+0xc4>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052e:	f003 0304 	and.w	r3, r3, #4
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000536:	4b25      	ldr	r3, [pc, #148]	@ (80005cc <MX_GPIO_Init+0xc4>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053a:	4a24      	ldr	r2, [pc, #144]	@ (80005cc <MX_GPIO_Init+0xc4>)
 800053c:	f043 0320 	orr.w	r3, r3, #32
 8000540:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000542:	4b22      	ldr	r3, [pc, #136]	@ (80005cc <MX_GPIO_Init+0xc4>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000546:	f003 0320 	and.w	r3, r3, #32
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054e:	4b1f      	ldr	r3, [pc, #124]	@ (80005cc <MX_GPIO_Init+0xc4>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000552:	4a1e      	ldr	r2, [pc, #120]	@ (80005cc <MX_GPIO_Init+0xc4>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800055a:	4b1c      	ldr	r3, [pc, #112]	@ (80005cc <MX_GPIO_Init+0xc4>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000566:	4b19      	ldr	r3, [pc, #100]	@ (80005cc <MX_GPIO_Init+0xc4>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056a:	4a18      	ldr	r2, [pc, #96]	@ (80005cc <MX_GPIO_Init+0xc4>)
 800056c:	f043 0302 	orr.w	r3, r3, #2
 8000570:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000572:	4b16      	ldr	r3, [pc, #88]	@ (80005cc <MX_GPIO_Init+0xc4>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000576:	f003 0302 	and.w	r3, r3, #2
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	2120      	movs	r1, #32
 8000582:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000586:	f000 fe47 	bl	8001218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800058a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800058e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000590:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000596:	2300      	movs	r3, #0
 8000598:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	4619      	mov	r1, r3
 80005a0:	480b      	ldr	r0, [pc, #44]	@ (80005d0 <MX_GPIO_Init+0xc8>)
 80005a2:	f000 fcb7 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005a6:	2320      	movs	r3, #32
 80005a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005aa:	2301      	movs	r3, #1
 80005ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b2:	2300      	movs	r3, #0
 80005b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	4619      	mov	r1, r3
 80005bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005c0:	f000 fca8 	bl	8000f14 <HAL_GPIO_Init>

}
 80005c4:	bf00      	nop
 80005c6:	3728      	adds	r7, #40	@ 0x28
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40021000 	.word	0x40021000
 80005d0:	48000800 	.word	0x48000800

080005d4 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005dc:	1d39      	adds	r1, r7, #4
 80005de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005e2:	2201      	movs	r2, #1
 80005e4:	4803      	ldr	r0, [pc, #12]	@ (80005f4 <__io_putchar+0x20>)
 80005e6:	f001 fe51 	bl	800228c <HAL_UART_Transmit>
return ch;
 80005ea:	687b      	ldr	r3, [r7, #4]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000088 	.word	0x20000088

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fc:	f000 fa49 	bl	8000a92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000600:	f000 f80c 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000604:	f7ff ff80 	bl	8000508 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000608:	f000 f96e 	bl	80008e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("=====TP RTOS=====\r\n");
 800060c:	4802      	ldr	r0, [pc, #8]	@ (8000618 <main+0x20>)
 800060e:	f003 f98f 	bl	8003930 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000612:	bf00      	nop
 8000614:	e7fd      	b.n	8000612 <main+0x1a>
 8000616:	bf00      	nop
 8000618:	08004070 	.word	0x08004070

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	@ 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0318 	add.w	r3, r7, #24
 8000626:	2238      	movs	r2, #56	@ 0x38
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f003 fa60 	bl	8003af0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800063e:	2000      	movs	r0, #0
 8000640:	f000 fe02 	bl	8001248 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000644:	2302      	movs	r3, #2
 8000646:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800064c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064e:	2340      	movs	r3, #64	@ 0x40
 8000650:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	2302      	movs	r3, #2
 8000654:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000656:	2302      	movs	r3, #2
 8000658:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800065a:	2304      	movs	r3, #4
 800065c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800065e:	2355      	movs	r3, #85	@ 0x55
 8000660:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800066a:	2302      	movs	r3, #2
 800066c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066e:	f107 0318 	add.w	r3, r7, #24
 8000672:	4618      	mov	r0, r3
 8000674:	f000 fe9c 	bl	80013b0 <HAL_RCC_OscConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800067e:	f000 f818 	bl	80006b2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000682:	230f      	movs	r3, #15
 8000684:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000686:	2303      	movs	r3, #3
 8000688:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	2104      	movs	r1, #4
 800069a:	4618      	mov	r0, r3
 800069c:	f001 f99a 	bl	80019d4 <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006a6:	f000 f804 	bl	80006b2 <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	@ 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b6:	b672      	cpsid	i
}
 80006b8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ba:	bf00      	nop
 80006bc:	e7fd      	b.n	80006ba <Error_Handler+0x8>
	...

080006c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <HAL_MspInit+0x44>)
 80006c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000704 <HAL_MspInit+0x44>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80006d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <HAL_MspInit+0x44>)
 80006d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006de:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <HAL_MspInit+0x44>)
 80006e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006e2:	4a08      	ldr	r2, [pc, #32]	@ (8000704 <HAL_MspInit+0x44>)
 80006e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80006ea:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <HAL_MspInit+0x44>)
 80006ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80006f6:	f000 fe4b 	bl	8001390 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40021000 	.word	0x40021000

08000708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <NMI_Handler+0x4>

08000710 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000714:	bf00      	nop
 8000716:	e7fd      	b.n	8000714 <HardFault_Handler+0x4>

08000718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800071c:	bf00      	nop
 800071e:	e7fd      	b.n	800071c <MemManage_Handler+0x4>

08000720 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000724:	bf00      	nop
 8000726:	e7fd      	b.n	8000724 <BusFault_Handler+0x4>

08000728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800072c:	bf00      	nop
 800072e:	e7fd      	b.n	800072c <UsageFault_Handler+0x4>

08000730 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr

0800073e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800075e:	f000 f9eb 	bl	8000b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800076c:	4802      	ldr	r0, [pc, #8]	@ (8000778 <USART2_IRQHandler+0x10>)
 800076e:	f001 fe1b 	bl	80023a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000088 	.word	0x20000088

0800077c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	e00a      	b.n	80007a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800078e:	f3af 8000 	nop.w
 8000792:	4601      	mov	r1, r0
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	1c5a      	adds	r2, r3, #1
 8000798:	60ba      	str	r2, [r7, #8]
 800079a:	b2ca      	uxtb	r2, r1
 800079c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	3301      	adds	r3, #1
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	697a      	ldr	r2, [r7, #20]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	dbf0      	blt.n	800078e <_read+0x12>
  }

  return len;
 80007ac:	687b      	ldr	r3, [r7, #4]
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3718      	adds	r7, #24
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b086      	sub	sp, #24
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	60f8      	str	r0, [r7, #12]
 80007be:	60b9      	str	r1, [r7, #8]
 80007c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	e009      	b.n	80007dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	1c5a      	adds	r2, r3, #1
 80007cc:	60ba      	str	r2, [r7, #8]
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff feff 	bl	80005d4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	3301      	adds	r3, #1
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	697a      	ldr	r2, [r7, #20]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	dbf1      	blt.n	80007c8 <_write+0x12>
  }
  return len;
 80007e4:	687b      	ldr	r3, [r7, #4]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <_close>:

int _close(int file)
{
 80007ee:	b480      	push	{r7}
 80007f0:	b083      	sub	sp, #12
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr

08000806 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000806:	b480      	push	{r7}
 8000808:	b083      	sub	sp, #12
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
 800080e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000816:	605a      	str	r2, [r3, #4]
  return 0;
 8000818:	2300      	movs	r3, #0
}
 800081a:	4618      	mov	r0, r3
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <_isatty>:

int _isatty(int file)
{
 8000826:	b480      	push	{r7}
 8000828:	b083      	sub	sp, #12
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800082e:	2301      	movs	r3, #1
}
 8000830:	4618      	mov	r0, r3
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000848:	2300      	movs	r3, #0
}
 800084a:	4618      	mov	r0, r3
 800084c:	3714      	adds	r7, #20
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
	...

08000858 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000860:	4a14      	ldr	r2, [pc, #80]	@ (80008b4 <_sbrk+0x5c>)
 8000862:	4b15      	ldr	r3, [pc, #84]	@ (80008b8 <_sbrk+0x60>)
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800086c:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <_sbrk+0x64>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d102      	bne.n	800087a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000874:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <_sbrk+0x64>)
 8000876:	4a12      	ldr	r2, [pc, #72]	@ (80008c0 <_sbrk+0x68>)
 8000878:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800087a:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <_sbrk+0x64>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4413      	add	r3, r2
 8000882:	693a      	ldr	r2, [r7, #16]
 8000884:	429a      	cmp	r2, r3
 8000886:	d207      	bcs.n	8000898 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000888:	f003 f980 	bl	8003b8c <__errno>
 800088c:	4603      	mov	r3, r0
 800088e:	220c      	movs	r2, #12
 8000890:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000892:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000896:	e009      	b.n	80008ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000898:	4b08      	ldr	r3, [pc, #32]	@ (80008bc <_sbrk+0x64>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800089e:	4b07      	ldr	r3, [pc, #28]	@ (80008bc <_sbrk+0x64>)
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4413      	add	r3, r2
 80008a6:	4a05      	ldr	r2, [pc, #20]	@ (80008bc <_sbrk+0x64>)
 80008a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008aa:	68fb      	ldr	r3, [r7, #12]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3718      	adds	r7, #24
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20008000 	.word	0x20008000
 80008b8:	00000400 	.word	0x00000400
 80008bc:	20000084 	.word	0x20000084
 80008c0:	20000270 	.word	0x20000270

080008c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008c8:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <SystemInit+0x20>)
 80008ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008ce:	4a05      	ldr	r2, [pc, #20]	@ (80008e4 <SystemInit+0x20>)
 80008d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008ec:	4b22      	ldr	r3, [pc, #136]	@ (8000978 <MX_USART2_UART_Init+0x90>)
 80008ee:	4a23      	ldr	r2, [pc, #140]	@ (800097c <MX_USART2_UART_Init+0x94>)
 80008f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008f2:	4b21      	ldr	r3, [pc, #132]	@ (8000978 <MX_USART2_UART_Init+0x90>)
 80008f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000978 <MX_USART2_UART_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000900:	4b1d      	ldr	r3, [pc, #116]	@ (8000978 <MX_USART2_UART_Init+0x90>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000906:	4b1c      	ldr	r3, [pc, #112]	@ (8000978 <MX_USART2_UART_Init+0x90>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800090c:	4b1a      	ldr	r3, [pc, #104]	@ (8000978 <MX_USART2_UART_Init+0x90>)
 800090e:	220c      	movs	r2, #12
 8000910:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000912:	4b19      	ldr	r3, [pc, #100]	@ (8000978 <MX_USART2_UART_Init+0x90>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000918:	4b17      	ldr	r3, [pc, #92]	@ (8000978 <MX_USART2_UART_Init+0x90>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091e:	4b16      	ldr	r3, [pc, #88]	@ (8000978 <MX_USART2_UART_Init+0x90>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000924:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <MX_USART2_UART_Init+0x90>)
 8000926:	2200      	movs	r2, #0
 8000928:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800092a:	4b13      	ldr	r3, [pc, #76]	@ (8000978 <MX_USART2_UART_Init+0x90>)
 800092c:	2200      	movs	r2, #0
 800092e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000930:	4811      	ldr	r0, [pc, #68]	@ (8000978 <MX_USART2_UART_Init+0x90>)
 8000932:	f001 fc5b 	bl	80021ec <HAL_UART_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800093c:	f7ff feb9 	bl	80006b2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000940:	2100      	movs	r1, #0
 8000942:	480d      	ldr	r0, [pc, #52]	@ (8000978 <MX_USART2_UART_Init+0x90>)
 8000944:	f002 fe11 	bl	800356a <HAL_UARTEx_SetTxFifoThreshold>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800094e:	f7ff feb0 	bl	80006b2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000952:	2100      	movs	r1, #0
 8000954:	4808      	ldr	r0, [pc, #32]	@ (8000978 <MX_USART2_UART_Init+0x90>)
 8000956:	f002 fe46 	bl	80035e6 <HAL_UARTEx_SetRxFifoThreshold>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000960:	f7ff fea7 	bl	80006b2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	@ (8000978 <MX_USART2_UART_Init+0x90>)
 8000966:	f002 fdc7 	bl	80034f8 <HAL_UARTEx_DisableFifoMode>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000970:	f7ff fe9f 	bl	80006b2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000088 	.word	0x20000088
 800097c:	40004400 	.word	0x40004400

08000980 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b09a      	sub	sp, #104	@ 0x68
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000998:	f107 0310 	add.w	r3, r7, #16
 800099c:	2244      	movs	r2, #68	@ 0x44
 800099e:	2100      	movs	r1, #0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f003 f8a5 	bl	8003af0 <memset>
  if(uartHandle->Instance==USART2)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a23      	ldr	r2, [pc, #140]	@ (8000a38 <HAL_UART_MspInit+0xb8>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d13e      	bne.n	8000a2e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009b0:	2302      	movs	r3, #2
 80009b2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009b8:	f107 0310 	add.w	r3, r7, #16
 80009bc:	4618      	mov	r0, r3
 80009be:	f001 fa25 	bl	8001e0c <HAL_RCCEx_PeriphCLKConfig>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009c8:	f7ff fe73 	bl	80006b2 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009cc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a3c <HAL_UART_MspInit+0xbc>)
 80009ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009d0:	4a1a      	ldr	r2, [pc, #104]	@ (8000a3c <HAL_UART_MspInit+0xbc>)
 80009d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80009d8:	4b18      	ldr	r3, [pc, #96]	@ (8000a3c <HAL_UART_MspInit+0xbc>)
 80009da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e4:	4b15      	ldr	r3, [pc, #84]	@ (8000a3c <HAL_UART_MspInit+0xbc>)
 80009e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e8:	4a14      	ldr	r2, [pc, #80]	@ (8000a3c <HAL_UART_MspInit+0xbc>)
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009f0:	4b12      	ldr	r3, [pc, #72]	@ (8000a3c <HAL_UART_MspInit+0xbc>)
 80009f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009fc:	230c      	movs	r3, #12
 80009fe:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a00:	2302      	movs	r3, #2
 8000a02:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a0c:	2307      	movs	r3, #7
 8000a0e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a10:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a14:	4619      	mov	r1, r3
 8000a16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a1a:	f000 fa7b 	bl	8000f14 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2100      	movs	r1, #0
 8000a22:	2026      	movs	r0, #38	@ 0x26
 8000a24:	f000 f981 	bl	8000d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a28:	2026      	movs	r0, #38	@ 0x26
 8000a2a:	f000 f998 	bl	8000d5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a2e:	bf00      	nop
 8000a30:	3768      	adds	r7, #104	@ 0x68
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40004400 	.word	0x40004400
 8000a3c:	40021000 	.word	0x40021000

08000a40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a40:	480d      	ldr	r0, [pc, #52]	@ (8000a78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a42:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a44:	f7ff ff3e 	bl	80008c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a48:	480c      	ldr	r0, [pc, #48]	@ (8000a7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a4a:	490d      	ldr	r1, [pc, #52]	@ (8000a80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a84 <LoopForever+0xe>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a50:	e002      	b.n	8000a58 <LoopCopyDataInit>

08000a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a56:	3304      	adds	r3, #4

08000a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a5c:	d3f9      	bcc.n	8000a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a60:	4c0a      	ldr	r4, [pc, #40]	@ (8000a8c <LoopForever+0x16>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a64:	e001      	b.n	8000a6a <LoopFillZerobss>

08000a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a68:	3204      	adds	r2, #4

08000a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a6c:	d3fb      	bcc.n	8000a66 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000a6e:	f003 f893 	bl	8003b98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a72:	f7ff fdc1 	bl	80005f8 <main>

08000a76 <LoopForever>:

LoopForever:
    b LoopForever
 8000a76:	e7fe      	b.n	8000a76 <LoopForever>
  ldr   r0, =_estack
 8000a78:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a80:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a84:	080040d4 	.word	0x080040d4
  ldr r2, =_sbss
 8000a88:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a8c:	2000026c 	.word	0x2000026c

08000a90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a90:	e7fe      	b.n	8000a90 <ADC1_2_IRQHandler>

08000a92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b082      	sub	sp, #8
 8000a96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f000 f939 	bl	8000d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f000 f80e 	bl	8000ac4 <HAL_InitTick>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d002      	beq.n	8000ab4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	71fb      	strb	r3, [r7, #7]
 8000ab2:	e001      	b.n	8000ab8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ab4:	f7ff fe04 	bl	80006c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ab8:	79fb      	ldrb	r3, [r7, #7]

}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000acc:	2300      	movs	r3, #0
 8000ace:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ad0:	4b16      	ldr	r3, [pc, #88]	@ (8000b2c <HAL_InitTick+0x68>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d022      	beq.n	8000b1e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ad8:	4b15      	ldr	r3, [pc, #84]	@ (8000b30 <HAL_InitTick+0x6c>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	4b13      	ldr	r3, [pc, #76]	@ (8000b2c <HAL_InitTick+0x68>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ae4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aec:	4618      	mov	r0, r3
 8000aee:	f000 f944 	bl	8000d7a <HAL_SYSTICK_Config>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d10f      	bne.n	8000b18 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b0f      	cmp	r3, #15
 8000afc:	d809      	bhi.n	8000b12 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000afe:	2200      	movs	r2, #0
 8000b00:	6879      	ldr	r1, [r7, #4]
 8000b02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b06:	f000 f910 	bl	8000d2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b34 <HAL_InitTick+0x70>)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6013      	str	r3, [r2, #0]
 8000b10:	e007      	b.n	8000b22 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	73fb      	strb	r3, [r7, #15]
 8000b16:	e004      	b.n	8000b22 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	73fb      	strb	r3, [r7, #15]
 8000b1c:	e001      	b.n	8000b22 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000008 	.word	0x20000008
 8000b30:	20000000 	.word	0x20000000
 8000b34:	20000004 	.word	0x20000004

08000b38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b3c:	4b05      	ldr	r3, [pc, #20]	@ (8000b54 <HAL_IncTick+0x1c>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b05      	ldr	r3, [pc, #20]	@ (8000b58 <HAL_IncTick+0x20>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4413      	add	r3, r2
 8000b46:	4a03      	ldr	r2, [pc, #12]	@ (8000b54 <HAL_IncTick+0x1c>)
 8000b48:	6013      	str	r3, [r2, #0]
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	2000011c 	.word	0x2000011c
 8000b58:	20000008 	.word	0x20000008

08000b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b60:	4b03      	ldr	r3, [pc, #12]	@ (8000b70 <HAL_GetTick+0x14>)
 8000b62:	681b      	ldr	r3, [r3, #0]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	2000011c 	.word	0x2000011c

08000b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f003 0307 	and.w	r3, r3, #7
 8000b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b84:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b90:	4013      	ands	r3, r2
 8000b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ba0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ba6:	4a04      	ldr	r2, [pc, #16]	@ (8000bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	60d3      	str	r3, [r2, #12]
}
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc0:	4b04      	ldr	r3, [pc, #16]	@ (8000bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	0a1b      	lsrs	r3, r3, #8
 8000bc6:	f003 0307 	and.w	r3, r3, #7
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	db0b      	blt.n	8000c02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	f003 021f 	and.w	r2, r3, #31
 8000bf0:	4907      	ldr	r1, [pc, #28]	@ (8000c10 <__NVIC_EnableIRQ+0x38>)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	095b      	lsrs	r3, r3, #5
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000e100 	.word	0xe000e100

08000c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	6039      	str	r1, [r7, #0]
 8000c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	db0a      	blt.n	8000c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	490c      	ldr	r1, [pc, #48]	@ (8000c60 <__NVIC_SetPriority+0x4c>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	0112      	lsls	r2, r2, #4
 8000c34:	b2d2      	uxtb	r2, r2
 8000c36:	440b      	add	r3, r1
 8000c38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c3c:	e00a      	b.n	8000c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4908      	ldr	r1, [pc, #32]	@ (8000c64 <__NVIC_SetPriority+0x50>)
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	f003 030f 	and.w	r3, r3, #15
 8000c4a:	3b04      	subs	r3, #4
 8000c4c:	0112      	lsls	r2, r2, #4
 8000c4e:	b2d2      	uxtb	r2, r2
 8000c50:	440b      	add	r3, r1
 8000c52:	761a      	strb	r2, [r3, #24]
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000e100 	.word	0xe000e100
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b089      	sub	sp, #36	@ 0x24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	f1c3 0307 	rsb	r3, r3, #7
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	bf28      	it	cs
 8000c86:	2304      	movcs	r3, #4
 8000c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	2b06      	cmp	r3, #6
 8000c90:	d902      	bls.n	8000c98 <NVIC_EncodePriority+0x30>
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3b03      	subs	r3, #3
 8000c96:	e000      	b.n	8000c9a <NVIC_EncodePriority+0x32>
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43da      	mvns	r2, r3
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	401a      	ands	r2, r3
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cba:	43d9      	mvns	r1, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc0:	4313      	orrs	r3, r2
         );
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3724      	adds	r7, #36	@ 0x24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ce0:	d301      	bcc.n	8000ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e00f      	b.n	8000d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d10 <SysTick_Config+0x40>)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cee:	210f      	movs	r1, #15
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cf4:	f7ff ff8e 	bl	8000c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf8:	4b05      	ldr	r3, [pc, #20]	@ (8000d10 <SysTick_Config+0x40>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cfe:	4b04      	ldr	r3, [pc, #16]	@ (8000d10 <SysTick_Config+0x40>)
 8000d00:	2207      	movs	r2, #7
 8000d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	e000e010 	.word	0xe000e010

08000d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff ff29 	bl	8000b74 <__NVIC_SetPriorityGrouping>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b086      	sub	sp, #24
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	4603      	mov	r3, r0
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	607a      	str	r2, [r7, #4]
 8000d36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d38:	f7ff ff40 	bl	8000bbc <__NVIC_GetPriorityGrouping>
 8000d3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	68b9      	ldr	r1, [r7, #8]
 8000d42:	6978      	ldr	r0, [r7, #20]
 8000d44:	f7ff ff90 	bl	8000c68 <NVIC_EncodePriority>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4e:	4611      	mov	r1, r2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff5f 	bl	8000c14 <__NVIC_SetPriority>
}
 8000d56:	bf00      	nop
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	4603      	mov	r3, r0
 8000d66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ff33 	bl	8000bd8 <__NVIC_EnableIRQ>
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f7ff ffa4 	bl	8000cd0 <SysTick_Config>
 8000d88:	4603      	mov	r3, r0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b085      	sub	sp, #20
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d005      	beq.n	8000db6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2204      	movs	r2, #4
 8000dae:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	73fb      	strb	r3, [r7, #15]
 8000db4:	e037      	b.n	8000e26 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f022 020e 	bic.w	r2, r2, #14
 8000dc4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dd0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000dd4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f022 0201 	bic.w	r2, r2, #1
 8000de4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dea:	f003 021f 	and.w	r2, r3, #31
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df2:	2101      	movs	r1, #1
 8000df4:	fa01 f202 	lsl.w	r2, r1, r2
 8000df8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000e02:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d00c      	beq.n	8000e26 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e16:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000e1a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000e24:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2201      	movs	r2, #1
 8000e2a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2200      	movs	r2, #0
 8000e32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d00d      	beq.n	8000e78 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2204      	movs	r2, #4
 8000e60:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2201      	movs	r2, #1
 8000e66:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	73fb      	strb	r3, [r7, #15]
 8000e76:	e047      	b.n	8000f08 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f022 020e 	bic.w	r2, r2, #14
 8000e86:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f022 0201 	bic.w	r2, r2, #1
 8000e96:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ea2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000ea6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eac:	f003 021f 	and.w	r2, r3, #31
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eba:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000ec4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d00c      	beq.n	8000ee8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ed8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000edc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000ee6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2201      	movs	r2, #1
 8000eec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d003      	beq.n	8000f08 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	4798      	blx	r3
    }
  }
  return status;
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b087      	sub	sp, #28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f22:	e15a      	b.n	80011da <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	2101      	movs	r1, #1
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f30:	4013      	ands	r3, r2
 8000f32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f000 814c 	beq.w	80011d4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 0303 	and.w	r3, r3, #3
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d005      	beq.n	8000f54 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d130      	bne.n	8000fb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	2203      	movs	r2, #3
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	68da      	ldr	r2, [r3, #12]
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	091b      	lsrs	r3, r3, #4
 8000fa0:	f003 0201 	and.w	r2, r3, #1
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 0303 	and.w	r3, r3, #3
 8000fbe:	2b03      	cmp	r3, #3
 8000fc0:	d017      	beq.n	8000ff2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	2203      	movs	r2, #3
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	689a      	ldr	r2, [r3, #8]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 0303 	and.w	r3, r3, #3
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d123      	bne.n	8001046 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	08da      	lsrs	r2, r3, #3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3208      	adds	r2, #8
 8001006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800100a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	220f      	movs	r2, #15
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4013      	ands	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	691a      	ldr	r2, [r3, #16]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	f003 0307 	and.w	r3, r3, #7
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	08da      	lsrs	r2, r3, #3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3208      	adds	r2, #8
 8001040:	6939      	ldr	r1, [r7, #16]
 8001042:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	2203      	movs	r2, #3
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4013      	ands	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 0203 	and.w	r2, r3, #3
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001082:	2b00      	cmp	r3, #0
 8001084:	f000 80a6 	beq.w	80011d4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001088:	4b5b      	ldr	r3, [pc, #364]	@ (80011f8 <HAL_GPIO_Init+0x2e4>)
 800108a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800108c:	4a5a      	ldr	r2, [pc, #360]	@ (80011f8 <HAL_GPIO_Init+0x2e4>)
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	6613      	str	r3, [r2, #96]	@ 0x60
 8001094:	4b58      	ldr	r3, [pc, #352]	@ (80011f8 <HAL_GPIO_Init+0x2e4>)
 8001096:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010a0:	4a56      	ldr	r2, [pc, #344]	@ (80011fc <HAL_GPIO_Init+0x2e8>)
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	089b      	lsrs	r3, r3, #2
 80010a6:	3302      	adds	r3, #2
 80010a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	220f      	movs	r2, #15
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010ca:	d01f      	beq.n	800110c <HAL_GPIO_Init+0x1f8>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a4c      	ldr	r2, [pc, #304]	@ (8001200 <HAL_GPIO_Init+0x2ec>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d019      	beq.n	8001108 <HAL_GPIO_Init+0x1f4>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a4b      	ldr	r2, [pc, #300]	@ (8001204 <HAL_GPIO_Init+0x2f0>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d013      	beq.n	8001104 <HAL_GPIO_Init+0x1f0>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a4a      	ldr	r2, [pc, #296]	@ (8001208 <HAL_GPIO_Init+0x2f4>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d00d      	beq.n	8001100 <HAL_GPIO_Init+0x1ec>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a49      	ldr	r2, [pc, #292]	@ (800120c <HAL_GPIO_Init+0x2f8>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d007      	beq.n	80010fc <HAL_GPIO_Init+0x1e8>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a48      	ldr	r2, [pc, #288]	@ (8001210 <HAL_GPIO_Init+0x2fc>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d101      	bne.n	80010f8 <HAL_GPIO_Init+0x1e4>
 80010f4:	2305      	movs	r3, #5
 80010f6:	e00a      	b.n	800110e <HAL_GPIO_Init+0x1fa>
 80010f8:	2306      	movs	r3, #6
 80010fa:	e008      	b.n	800110e <HAL_GPIO_Init+0x1fa>
 80010fc:	2304      	movs	r3, #4
 80010fe:	e006      	b.n	800110e <HAL_GPIO_Init+0x1fa>
 8001100:	2303      	movs	r3, #3
 8001102:	e004      	b.n	800110e <HAL_GPIO_Init+0x1fa>
 8001104:	2302      	movs	r3, #2
 8001106:	e002      	b.n	800110e <HAL_GPIO_Init+0x1fa>
 8001108:	2301      	movs	r3, #1
 800110a:	e000      	b.n	800110e <HAL_GPIO_Init+0x1fa>
 800110c:	2300      	movs	r3, #0
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	f002 0203 	and.w	r2, r2, #3
 8001114:	0092      	lsls	r2, r2, #2
 8001116:	4093      	lsls	r3, r2
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4313      	orrs	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800111e:	4937      	ldr	r1, [pc, #220]	@ (80011fc <HAL_GPIO_Init+0x2e8>)
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	089b      	lsrs	r3, r3, #2
 8001124:	3302      	adds	r3, #2
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800112c:	4b39      	ldr	r3, [pc, #228]	@ (8001214 <HAL_GPIO_Init+0x300>)
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	43db      	mvns	r3, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001150:	4a30      	ldr	r2, [pc, #192]	@ (8001214 <HAL_GPIO_Init+0x300>)
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001156:	4b2f      	ldr	r3, [pc, #188]	@ (8001214 <HAL_GPIO_Init+0x300>)
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	43db      	mvns	r3, r3
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4013      	ands	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4313      	orrs	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800117a:	4a26      	ldr	r2, [pc, #152]	@ (8001214 <HAL_GPIO_Init+0x300>)
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001180:	4b24      	ldr	r3, [pc, #144]	@ (8001214 <HAL_GPIO_Init+0x300>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	43db      	mvns	r3, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d003      	beq.n	80011a4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001214 <HAL_GPIO_Init+0x300>)
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80011aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001214 <HAL_GPIO_Init+0x300>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	4013      	ands	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011ce:	4a11      	ldr	r2, [pc, #68]	@ (8001214 <HAL_GPIO_Init+0x300>)
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	3301      	adds	r3, #1
 80011d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	fa22 f303 	lsr.w	r3, r2, r3
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f47f ae9d 	bne.w	8000f24 <HAL_GPIO_Init+0x10>
  }
}
 80011ea:	bf00      	nop
 80011ec:	bf00      	nop
 80011ee:	371c      	adds	r7, #28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40010000 	.word	0x40010000
 8001200:	48000400 	.word	0x48000400
 8001204:	48000800 	.word	0x48000800
 8001208:	48000c00 	.word	0x48000c00
 800120c:	48001000 	.word	0x48001000
 8001210:	48001400 	.word	0x48001400
 8001214:	40010400 	.word	0x40010400

08001218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	807b      	strh	r3, [r7, #2]
 8001224:	4613      	mov	r3, r2
 8001226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001228:	787b      	ldrb	r3, [r7, #1]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800122e:	887a      	ldrh	r2, [r7, #2]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001234:	e002      	b.n	800123c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001236:	887a      	ldrh	r2, [r7, #2]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d141      	bne.n	80012da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001256:	4b4b      	ldr	r3, [pc, #300]	@ (8001384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800125e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001262:	d131      	bne.n	80012c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001264:	4b47      	ldr	r3, [pc, #284]	@ (8001384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800126a:	4a46      	ldr	r2, [pc, #280]	@ (8001384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800126c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001270:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001274:	4b43      	ldr	r3, [pc, #268]	@ (8001384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800127c:	4a41      	ldr	r2, [pc, #260]	@ (8001384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800127e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001282:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001284:	4b40      	ldr	r3, [pc, #256]	@ (8001388 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2232      	movs	r2, #50	@ 0x32
 800128a:	fb02 f303 	mul.w	r3, r2, r3
 800128e:	4a3f      	ldr	r2, [pc, #252]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001290:	fba2 2303 	umull	r2, r3, r2, r3
 8001294:	0c9b      	lsrs	r3, r3, #18
 8001296:	3301      	adds	r3, #1
 8001298:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800129a:	e002      	b.n	80012a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	3b01      	subs	r3, #1
 80012a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012a2:	4b38      	ldr	r3, [pc, #224]	@ (8001384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012ae:	d102      	bne.n	80012b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f2      	bne.n	800129c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012b6:	4b33      	ldr	r3, [pc, #204]	@ (8001384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012c2:	d158      	bne.n	8001376 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e057      	b.n	8001378 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012ce:	4a2d      	ldr	r2, [pc, #180]	@ (8001384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80012d8:	e04d      	b.n	8001376 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012e0:	d141      	bne.n	8001366 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012e2:	4b28      	ldr	r3, [pc, #160]	@ (8001384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012ee:	d131      	bne.n	8001354 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012f0:	4b24      	ldr	r3, [pc, #144]	@ (8001384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012f6:	4a23      	ldr	r2, [pc, #140]	@ (8001384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001300:	4b20      	ldr	r3, [pc, #128]	@ (8001384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001308:	4a1e      	ldr	r2, [pc, #120]	@ (8001384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800130a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800130e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001310:	4b1d      	ldr	r3, [pc, #116]	@ (8001388 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2232      	movs	r2, #50	@ 0x32
 8001316:	fb02 f303 	mul.w	r3, r2, r3
 800131a:	4a1c      	ldr	r2, [pc, #112]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800131c:	fba2 2303 	umull	r2, r3, r2, r3
 8001320:	0c9b      	lsrs	r3, r3, #18
 8001322:	3301      	adds	r3, #1
 8001324:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001326:	e002      	b.n	800132e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	3b01      	subs	r3, #1
 800132c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800132e:	4b15      	ldr	r3, [pc, #84]	@ (8001384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001336:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800133a:	d102      	bne.n	8001342 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f2      	bne.n	8001328 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001342:	4b10      	ldr	r3, [pc, #64]	@ (8001384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800134a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800134e:	d112      	bne.n	8001376 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e011      	b.n	8001378 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001354:	4b0b      	ldr	r3, [pc, #44]	@ (8001384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001356:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800135a:	4a0a      	ldr	r2, [pc, #40]	@ (8001384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800135c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001360:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001364:	e007      	b.n	8001376 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001366:	4b07      	ldr	r3, [pc, #28]	@ (8001384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800136e:	4a05      	ldr	r2, [pc, #20]	@ (8001384 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001370:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001374:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	40007000 	.word	0x40007000
 8001388:	20000000 	.word	0x20000000
 800138c:	431bde83 	.word	0x431bde83

08001390 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001394:	4b05      	ldr	r3, [pc, #20]	@ (80013ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	4a04      	ldr	r2, [pc, #16]	@ (80013ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800139a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800139e:	6093      	str	r3, [r2, #8]
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40007000 	.word	0x40007000

080013b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e2fe      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d075      	beq.n	80014ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013ce:	4b97      	ldr	r3, [pc, #604]	@ (800162c <HAL_RCC_OscConfig+0x27c>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
 80013d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013d8:	4b94      	ldr	r3, [pc, #592]	@ (800162c <HAL_RCC_OscConfig+0x27c>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	2b0c      	cmp	r3, #12
 80013e6:	d102      	bne.n	80013ee <HAL_RCC_OscConfig+0x3e>
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d002      	beq.n	80013f4 <HAL_RCC_OscConfig+0x44>
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	2b08      	cmp	r3, #8
 80013f2:	d10b      	bne.n	800140c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f4:	4b8d      	ldr	r3, [pc, #564]	@ (800162c <HAL_RCC_OscConfig+0x27c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d05b      	beq.n	80014b8 <HAL_RCC_OscConfig+0x108>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d157      	bne.n	80014b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e2d9      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001414:	d106      	bne.n	8001424 <HAL_RCC_OscConfig+0x74>
 8001416:	4b85      	ldr	r3, [pc, #532]	@ (800162c <HAL_RCC_OscConfig+0x27c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a84      	ldr	r2, [pc, #528]	@ (800162c <HAL_RCC_OscConfig+0x27c>)
 800141c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	e01d      	b.n	8001460 <HAL_RCC_OscConfig+0xb0>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800142c:	d10c      	bne.n	8001448 <HAL_RCC_OscConfig+0x98>
 800142e:	4b7f      	ldr	r3, [pc, #508]	@ (800162c <HAL_RCC_OscConfig+0x27c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a7e      	ldr	r2, [pc, #504]	@ (800162c <HAL_RCC_OscConfig+0x27c>)
 8001434:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	4b7c      	ldr	r3, [pc, #496]	@ (800162c <HAL_RCC_OscConfig+0x27c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a7b      	ldr	r2, [pc, #492]	@ (800162c <HAL_RCC_OscConfig+0x27c>)
 8001440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	e00b      	b.n	8001460 <HAL_RCC_OscConfig+0xb0>
 8001448:	4b78      	ldr	r3, [pc, #480]	@ (800162c <HAL_RCC_OscConfig+0x27c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a77      	ldr	r2, [pc, #476]	@ (800162c <HAL_RCC_OscConfig+0x27c>)
 800144e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	4b75      	ldr	r3, [pc, #468]	@ (800162c <HAL_RCC_OscConfig+0x27c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a74      	ldr	r2, [pc, #464]	@ (800162c <HAL_RCC_OscConfig+0x27c>)
 800145a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800145e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d013      	beq.n	8001490 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001468:	f7ff fb78 	bl	8000b5c <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001470:	f7ff fb74 	bl	8000b5c <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b64      	cmp	r3, #100	@ 0x64
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e29e      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001482:	4b6a      	ldr	r3, [pc, #424]	@ (800162c <HAL_RCC_OscConfig+0x27c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d0f0      	beq.n	8001470 <HAL_RCC_OscConfig+0xc0>
 800148e:	e014      	b.n	80014ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001490:	f7ff fb64 	bl	8000b5c <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001498:	f7ff fb60 	bl	8000b5c <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b64      	cmp	r3, #100	@ 0x64
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e28a      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014aa:	4b60      	ldr	r3, [pc, #384]	@ (800162c <HAL_RCC_OscConfig+0x27c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f0      	bne.n	8001498 <HAL_RCC_OscConfig+0xe8>
 80014b6:	e000      	b.n	80014ba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d075      	beq.n	80015b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014c6:	4b59      	ldr	r3, [pc, #356]	@ (800162c <HAL_RCC_OscConfig+0x27c>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 030c 	and.w	r3, r3, #12
 80014ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014d0:	4b56      	ldr	r3, [pc, #344]	@ (800162c <HAL_RCC_OscConfig+0x27c>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	2b0c      	cmp	r3, #12
 80014de:	d102      	bne.n	80014e6 <HAL_RCC_OscConfig+0x136>
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d002      	beq.n	80014ec <HAL_RCC_OscConfig+0x13c>
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	2b04      	cmp	r3, #4
 80014ea:	d11f      	bne.n	800152c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014ec:	4b4f      	ldr	r3, [pc, #316]	@ (800162c <HAL_RCC_OscConfig+0x27c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d005      	beq.n	8001504 <HAL_RCC_OscConfig+0x154>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e25d      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001504:	4b49      	ldr	r3, [pc, #292]	@ (800162c <HAL_RCC_OscConfig+0x27c>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	061b      	lsls	r3, r3, #24
 8001512:	4946      	ldr	r1, [pc, #280]	@ (800162c <HAL_RCC_OscConfig+0x27c>)
 8001514:	4313      	orrs	r3, r2
 8001516:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001518:	4b45      	ldr	r3, [pc, #276]	@ (8001630 <HAL_RCC_OscConfig+0x280>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fad1 	bl	8000ac4 <HAL_InitTick>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d043      	beq.n	80015b0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e249      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d023      	beq.n	800157c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001534:	4b3d      	ldr	r3, [pc, #244]	@ (800162c <HAL_RCC_OscConfig+0x27c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a3c      	ldr	r2, [pc, #240]	@ (800162c <HAL_RCC_OscConfig+0x27c>)
 800153a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800153e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001540:	f7ff fb0c 	bl	8000b5c <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001548:	f7ff fb08 	bl	8000b5c <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e232      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800155a:	4b34      	ldr	r3, [pc, #208]	@ (800162c <HAL_RCC_OscConfig+0x27c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f0      	beq.n	8001548 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001566:	4b31      	ldr	r3, [pc, #196]	@ (800162c <HAL_RCC_OscConfig+0x27c>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	061b      	lsls	r3, r3, #24
 8001574:	492d      	ldr	r1, [pc, #180]	@ (800162c <HAL_RCC_OscConfig+0x27c>)
 8001576:	4313      	orrs	r3, r2
 8001578:	604b      	str	r3, [r1, #4]
 800157a:	e01a      	b.n	80015b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800157c:	4b2b      	ldr	r3, [pc, #172]	@ (800162c <HAL_RCC_OscConfig+0x27c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a2a      	ldr	r2, [pc, #168]	@ (800162c <HAL_RCC_OscConfig+0x27c>)
 8001582:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001586:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001588:	f7ff fae8 	bl	8000b5c <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001590:	f7ff fae4 	bl	8000b5c <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e20e      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015a2:	4b22      	ldr	r3, [pc, #136]	@ (800162c <HAL_RCC_OscConfig+0x27c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0x1e0>
 80015ae:	e000      	b.n	80015b2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d041      	beq.n	8001642 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d01c      	beq.n	8001600 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015c6:	4b19      	ldr	r3, [pc, #100]	@ (800162c <HAL_RCC_OscConfig+0x27c>)
 80015c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015cc:	4a17      	ldr	r2, [pc, #92]	@ (800162c <HAL_RCC_OscConfig+0x27c>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d6:	f7ff fac1 	bl	8000b5c <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015de:	f7ff fabd 	bl	8000b5c <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e1e7      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015f0:	4b0e      	ldr	r3, [pc, #56]	@ (800162c <HAL_RCC_OscConfig+0x27c>)
 80015f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0ef      	beq.n	80015de <HAL_RCC_OscConfig+0x22e>
 80015fe:	e020      	b.n	8001642 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001600:	4b0a      	ldr	r3, [pc, #40]	@ (800162c <HAL_RCC_OscConfig+0x27c>)
 8001602:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001606:	4a09      	ldr	r2, [pc, #36]	@ (800162c <HAL_RCC_OscConfig+0x27c>)
 8001608:	f023 0301 	bic.w	r3, r3, #1
 800160c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001610:	f7ff faa4 	bl	8000b5c <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001616:	e00d      	b.n	8001634 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001618:	f7ff faa0 	bl	8000b5c <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d906      	bls.n	8001634 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e1ca      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
 800162a:	bf00      	nop
 800162c:	40021000 	.word	0x40021000
 8001630:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001634:	4b8c      	ldr	r3, [pc, #560]	@ (8001868 <HAL_RCC_OscConfig+0x4b8>)
 8001636:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1ea      	bne.n	8001618 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0304 	and.w	r3, r3, #4
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 80a6 	beq.w	800179c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001650:	2300      	movs	r3, #0
 8001652:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001654:	4b84      	ldr	r3, [pc, #528]	@ (8001868 <HAL_RCC_OscConfig+0x4b8>)
 8001656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d101      	bne.n	8001664 <HAL_RCC_OscConfig+0x2b4>
 8001660:	2301      	movs	r3, #1
 8001662:	e000      	b.n	8001666 <HAL_RCC_OscConfig+0x2b6>
 8001664:	2300      	movs	r3, #0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d00d      	beq.n	8001686 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800166a:	4b7f      	ldr	r3, [pc, #508]	@ (8001868 <HAL_RCC_OscConfig+0x4b8>)
 800166c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800166e:	4a7e      	ldr	r2, [pc, #504]	@ (8001868 <HAL_RCC_OscConfig+0x4b8>)
 8001670:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001674:	6593      	str	r3, [r2, #88]	@ 0x58
 8001676:	4b7c      	ldr	r3, [pc, #496]	@ (8001868 <HAL_RCC_OscConfig+0x4b8>)
 8001678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800167a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001682:	2301      	movs	r3, #1
 8001684:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001686:	4b79      	ldr	r3, [pc, #484]	@ (800186c <HAL_RCC_OscConfig+0x4bc>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800168e:	2b00      	cmp	r3, #0
 8001690:	d118      	bne.n	80016c4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001692:	4b76      	ldr	r3, [pc, #472]	@ (800186c <HAL_RCC_OscConfig+0x4bc>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a75      	ldr	r2, [pc, #468]	@ (800186c <HAL_RCC_OscConfig+0x4bc>)
 8001698:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800169c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800169e:	f7ff fa5d 	bl	8000b5c <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a6:	f7ff fa59 	bl	8000b5c <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e183      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b8:	4b6c      	ldr	r3, [pc, #432]	@ (800186c <HAL_RCC_OscConfig+0x4bc>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0f0      	beq.n	80016a6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d108      	bne.n	80016de <HAL_RCC_OscConfig+0x32e>
 80016cc:	4b66      	ldr	r3, [pc, #408]	@ (8001868 <HAL_RCC_OscConfig+0x4b8>)
 80016ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016d2:	4a65      	ldr	r2, [pc, #404]	@ (8001868 <HAL_RCC_OscConfig+0x4b8>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016dc:	e024      	b.n	8001728 <HAL_RCC_OscConfig+0x378>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2b05      	cmp	r3, #5
 80016e4:	d110      	bne.n	8001708 <HAL_RCC_OscConfig+0x358>
 80016e6:	4b60      	ldr	r3, [pc, #384]	@ (8001868 <HAL_RCC_OscConfig+0x4b8>)
 80016e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016ec:	4a5e      	ldr	r2, [pc, #376]	@ (8001868 <HAL_RCC_OscConfig+0x4b8>)
 80016ee:	f043 0304 	orr.w	r3, r3, #4
 80016f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016f6:	4b5c      	ldr	r3, [pc, #368]	@ (8001868 <HAL_RCC_OscConfig+0x4b8>)
 80016f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016fc:	4a5a      	ldr	r2, [pc, #360]	@ (8001868 <HAL_RCC_OscConfig+0x4b8>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001706:	e00f      	b.n	8001728 <HAL_RCC_OscConfig+0x378>
 8001708:	4b57      	ldr	r3, [pc, #348]	@ (8001868 <HAL_RCC_OscConfig+0x4b8>)
 800170a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800170e:	4a56      	ldr	r2, [pc, #344]	@ (8001868 <HAL_RCC_OscConfig+0x4b8>)
 8001710:	f023 0301 	bic.w	r3, r3, #1
 8001714:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001718:	4b53      	ldr	r3, [pc, #332]	@ (8001868 <HAL_RCC_OscConfig+0x4b8>)
 800171a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800171e:	4a52      	ldr	r2, [pc, #328]	@ (8001868 <HAL_RCC_OscConfig+0x4b8>)
 8001720:	f023 0304 	bic.w	r3, r3, #4
 8001724:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d016      	beq.n	800175e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001730:	f7ff fa14 	bl	8000b5c <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001736:	e00a      	b.n	800174e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001738:	f7ff fa10 	bl	8000b5c <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001746:	4293      	cmp	r3, r2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e138      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800174e:	4b46      	ldr	r3, [pc, #280]	@ (8001868 <HAL_RCC_OscConfig+0x4b8>)
 8001750:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0ed      	beq.n	8001738 <HAL_RCC_OscConfig+0x388>
 800175c:	e015      	b.n	800178a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175e:	f7ff f9fd 	bl	8000b5c <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001764:	e00a      	b.n	800177c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001766:	f7ff f9f9 	bl	8000b5c <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001774:	4293      	cmp	r3, r2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e121      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800177c:	4b3a      	ldr	r3, [pc, #232]	@ (8001868 <HAL_RCC_OscConfig+0x4b8>)
 800177e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1ed      	bne.n	8001766 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800178a:	7ffb      	ldrb	r3, [r7, #31]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d105      	bne.n	800179c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001790:	4b35      	ldr	r3, [pc, #212]	@ (8001868 <HAL_RCC_OscConfig+0x4b8>)
 8001792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001794:	4a34      	ldr	r2, [pc, #208]	@ (8001868 <HAL_RCC_OscConfig+0x4b8>)
 8001796:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800179a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0320 	and.w	r3, r3, #32
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d03c      	beq.n	8001822 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d01c      	beq.n	80017ea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001868 <HAL_RCC_OscConfig+0x4b8>)
 80017b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017b6:	4a2c      	ldr	r2, [pc, #176]	@ (8001868 <HAL_RCC_OscConfig+0x4b8>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c0:	f7ff f9cc 	bl	8000b5c <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017c8:	f7ff f9c8 	bl	8000b5c <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e0f2      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017da:	4b23      	ldr	r3, [pc, #140]	@ (8001868 <HAL_RCC_OscConfig+0x4b8>)
 80017dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0ef      	beq.n	80017c8 <HAL_RCC_OscConfig+0x418>
 80017e8:	e01b      	b.n	8001822 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001868 <HAL_RCC_OscConfig+0x4b8>)
 80017ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001868 <HAL_RCC_OscConfig+0x4b8>)
 80017f2:	f023 0301 	bic.w	r3, r3, #1
 80017f6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fa:	f7ff f9af 	bl	8000b5c <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001802:	f7ff f9ab 	bl	8000b5c <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e0d5      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001814:	4b14      	ldr	r3, [pc, #80]	@ (8001868 <HAL_RCC_OscConfig+0x4b8>)
 8001816:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1ef      	bne.n	8001802 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 80c9 	beq.w	80019be <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800182c:	4b0e      	ldr	r3, [pc, #56]	@ (8001868 <HAL_RCC_OscConfig+0x4b8>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 030c 	and.w	r3, r3, #12
 8001834:	2b0c      	cmp	r3, #12
 8001836:	f000 8083 	beq.w	8001940 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	2b02      	cmp	r3, #2
 8001840:	d15e      	bne.n	8001900 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001842:	4b09      	ldr	r3, [pc, #36]	@ (8001868 <HAL_RCC_OscConfig+0x4b8>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a08      	ldr	r2, [pc, #32]	@ (8001868 <HAL_RCC_OscConfig+0x4b8>)
 8001848:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800184c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184e:	f7ff f985 	bl	8000b5c <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001854:	e00c      	b.n	8001870 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001856:	f7ff f981 	bl	8000b5c <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d905      	bls.n	8001870 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e0ab      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
 8001868:	40021000 	.word	0x40021000
 800186c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001870:	4b55      	ldr	r3, [pc, #340]	@ (80019c8 <HAL_RCC_OscConfig+0x618>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1ec      	bne.n	8001856 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800187c:	4b52      	ldr	r3, [pc, #328]	@ (80019c8 <HAL_RCC_OscConfig+0x618>)
 800187e:	68da      	ldr	r2, [r3, #12]
 8001880:	4b52      	ldr	r3, [pc, #328]	@ (80019cc <HAL_RCC_OscConfig+0x61c>)
 8001882:	4013      	ands	r3, r2
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	6a11      	ldr	r1, [r2, #32]
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800188c:	3a01      	subs	r2, #1
 800188e:	0112      	lsls	r2, r2, #4
 8001890:	4311      	orrs	r1, r2
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001896:	0212      	lsls	r2, r2, #8
 8001898:	4311      	orrs	r1, r2
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800189e:	0852      	lsrs	r2, r2, #1
 80018a0:	3a01      	subs	r2, #1
 80018a2:	0552      	lsls	r2, r2, #21
 80018a4:	4311      	orrs	r1, r2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80018aa:	0852      	lsrs	r2, r2, #1
 80018ac:	3a01      	subs	r2, #1
 80018ae:	0652      	lsls	r2, r2, #25
 80018b0:	4311      	orrs	r1, r2
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80018b6:	06d2      	lsls	r2, r2, #27
 80018b8:	430a      	orrs	r2, r1
 80018ba:	4943      	ldr	r1, [pc, #268]	@ (80019c8 <HAL_RCC_OscConfig+0x618>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c0:	4b41      	ldr	r3, [pc, #260]	@ (80019c8 <HAL_RCC_OscConfig+0x618>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a40      	ldr	r2, [pc, #256]	@ (80019c8 <HAL_RCC_OscConfig+0x618>)
 80018c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018cc:	4b3e      	ldr	r3, [pc, #248]	@ (80019c8 <HAL_RCC_OscConfig+0x618>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	4a3d      	ldr	r2, [pc, #244]	@ (80019c8 <HAL_RCC_OscConfig+0x618>)
 80018d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d8:	f7ff f940 	bl	8000b5c <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e0:	f7ff f93c 	bl	8000b5c <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e066      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018f2:	4b35      	ldr	r3, [pc, #212]	@ (80019c8 <HAL_RCC_OscConfig+0x618>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCC_OscConfig+0x530>
 80018fe:	e05e      	b.n	80019be <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001900:	4b31      	ldr	r3, [pc, #196]	@ (80019c8 <HAL_RCC_OscConfig+0x618>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a30      	ldr	r2, [pc, #192]	@ (80019c8 <HAL_RCC_OscConfig+0x618>)
 8001906:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800190a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190c:	f7ff f926 	bl	8000b5c <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001914:	f7ff f922 	bl	8000b5c <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e04c      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001926:	4b28      	ldr	r3, [pc, #160]	@ (80019c8 <HAL_RCC_OscConfig+0x618>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f0      	bne.n	8001914 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001932:	4b25      	ldr	r3, [pc, #148]	@ (80019c8 <HAL_RCC_OscConfig+0x618>)
 8001934:	68da      	ldr	r2, [r3, #12]
 8001936:	4924      	ldr	r1, [pc, #144]	@ (80019c8 <HAL_RCC_OscConfig+0x618>)
 8001938:	4b25      	ldr	r3, [pc, #148]	@ (80019d0 <HAL_RCC_OscConfig+0x620>)
 800193a:	4013      	ands	r3, r2
 800193c:	60cb      	str	r3, [r1, #12]
 800193e:	e03e      	b.n	80019be <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69db      	ldr	r3, [r3, #28]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d101      	bne.n	800194c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e039      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800194c:	4b1e      	ldr	r3, [pc, #120]	@ (80019c8 <HAL_RCC_OscConfig+0x618>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f003 0203 	and.w	r2, r3, #3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	429a      	cmp	r2, r3
 800195e:	d12c      	bne.n	80019ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196a:	3b01      	subs	r3, #1
 800196c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800196e:	429a      	cmp	r2, r3
 8001970:	d123      	bne.n	80019ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800197c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800197e:	429a      	cmp	r2, r3
 8001980:	d11b      	bne.n	80019ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800198c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800198e:	429a      	cmp	r2, r3
 8001990:	d113      	bne.n	80019ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199c:	085b      	lsrs	r3, r3, #1
 800199e:	3b01      	subs	r3, #1
 80019a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d109      	bne.n	80019ba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019b0:	085b      	lsrs	r3, r3, #1
 80019b2:	3b01      	subs	r3, #1
 80019b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d001      	beq.n	80019be <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3720      	adds	r7, #32
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40021000 	.word	0x40021000
 80019cc:	019f800c 	.word	0x019f800c
 80019d0:	feeefffc 	.word	0xfeeefffc

080019d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e11e      	b.n	8001c2a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019ec:	4b91      	ldr	r3, [pc, #580]	@ (8001c34 <HAL_RCC_ClockConfig+0x260>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 030f 	and.w	r3, r3, #15
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d910      	bls.n	8001a1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fa:	4b8e      	ldr	r3, [pc, #568]	@ (8001c34 <HAL_RCC_ClockConfig+0x260>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f023 020f 	bic.w	r2, r3, #15
 8001a02:	498c      	ldr	r1, [pc, #560]	@ (8001c34 <HAL_RCC_ClockConfig+0x260>)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a0a:	4b8a      	ldr	r3, [pc, #552]	@ (8001c34 <HAL_RCC_ClockConfig+0x260>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d001      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e106      	b.n	8001c2a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d073      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b03      	cmp	r3, #3
 8001a2e:	d129      	bne.n	8001a84 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a30:	4b81      	ldr	r3, [pc, #516]	@ (8001c38 <HAL_RCC_ClockConfig+0x264>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e0f4      	b.n	8001c2a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001a40:	f000 f99e 	bl	8001d80 <RCC_GetSysClockFreqFromPLLSource>
 8001a44:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	4a7c      	ldr	r2, [pc, #496]	@ (8001c3c <HAL_RCC_ClockConfig+0x268>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d93f      	bls.n	8001ace <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a4e:	4b7a      	ldr	r3, [pc, #488]	@ (8001c38 <HAL_RCC_ClockConfig+0x264>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d009      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d033      	beq.n	8001ace <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d12f      	bne.n	8001ace <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a6e:	4b72      	ldr	r3, [pc, #456]	@ (8001c38 <HAL_RCC_ClockConfig+0x264>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a76:	4a70      	ldr	r2, [pc, #448]	@ (8001c38 <HAL_RCC_ClockConfig+0x264>)
 8001a78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a7c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001a7e:	2380      	movs	r3, #128	@ 0x80
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	e024      	b.n	8001ace <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d107      	bne.n	8001a9c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a8c:	4b6a      	ldr	r3, [pc, #424]	@ (8001c38 <HAL_RCC_ClockConfig+0x264>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d109      	bne.n	8001aac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e0c6      	b.n	8001c2a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a9c:	4b66      	ldr	r3, [pc, #408]	@ (8001c38 <HAL_RCC_ClockConfig+0x264>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e0be      	b.n	8001c2a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001aac:	f000 f8ce 	bl	8001c4c <HAL_RCC_GetSysClockFreq>
 8001ab0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4a61      	ldr	r2, [pc, #388]	@ (8001c3c <HAL_RCC_ClockConfig+0x268>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d909      	bls.n	8001ace <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001aba:	4b5f      	ldr	r3, [pc, #380]	@ (8001c38 <HAL_RCC_ClockConfig+0x264>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ac2:	4a5d      	ldr	r2, [pc, #372]	@ (8001c38 <HAL_RCC_ClockConfig+0x264>)
 8001ac4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ac8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001aca:	2380      	movs	r3, #128	@ 0x80
 8001acc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ace:	4b5a      	ldr	r3, [pc, #360]	@ (8001c38 <HAL_RCC_ClockConfig+0x264>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f023 0203 	bic.w	r2, r3, #3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	4957      	ldr	r1, [pc, #348]	@ (8001c38 <HAL_RCC_ClockConfig+0x264>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ae0:	f7ff f83c 	bl	8000b5c <HAL_GetTick>
 8001ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae6:	e00a      	b.n	8001afe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae8:	f7ff f838 	bl	8000b5c <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e095      	b.n	8001c2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afe:	4b4e      	ldr	r3, [pc, #312]	@ (8001c38 <HAL_RCC_ClockConfig+0x264>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 020c 	and.w	r2, r3, #12
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d1eb      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d023      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d005      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b28:	4b43      	ldr	r3, [pc, #268]	@ (8001c38 <HAL_RCC_ClockConfig+0x264>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	4a42      	ldr	r2, [pc, #264]	@ (8001c38 <HAL_RCC_ClockConfig+0x264>)
 8001b2e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b32:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0308 	and.w	r3, r3, #8
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d007      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001b40:	4b3d      	ldr	r3, [pc, #244]	@ (8001c38 <HAL_RCC_ClockConfig+0x264>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001b48:	4a3b      	ldr	r2, [pc, #236]	@ (8001c38 <HAL_RCC_ClockConfig+0x264>)
 8001b4a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b50:	4b39      	ldr	r3, [pc, #228]	@ (8001c38 <HAL_RCC_ClockConfig+0x264>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	4936      	ldr	r1, [pc, #216]	@ (8001c38 <HAL_RCC_ClockConfig+0x264>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	608b      	str	r3, [r1, #8]
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	2b80      	cmp	r3, #128	@ 0x80
 8001b68:	d105      	bne.n	8001b76 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001b6a:	4b33      	ldr	r3, [pc, #204]	@ (8001c38 <HAL_RCC_ClockConfig+0x264>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	4a32      	ldr	r2, [pc, #200]	@ (8001c38 <HAL_RCC_ClockConfig+0x264>)
 8001b70:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b74:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b76:	4b2f      	ldr	r3, [pc, #188]	@ (8001c34 <HAL_RCC_ClockConfig+0x260>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d21d      	bcs.n	8001bc0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b84:	4b2b      	ldr	r3, [pc, #172]	@ (8001c34 <HAL_RCC_ClockConfig+0x260>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f023 020f 	bic.w	r2, r3, #15
 8001b8c:	4929      	ldr	r1, [pc, #164]	@ (8001c34 <HAL_RCC_ClockConfig+0x260>)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b94:	f7fe ffe2 	bl	8000b5c <HAL_GetTick>
 8001b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9a:	e00a      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b9c:	f7fe ffde 	bl	8000b5c <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e03b      	b.n	8001c2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb2:	4b20      	ldr	r3, [pc, #128]	@ (8001c34 <HAL_RCC_ClockConfig+0x260>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d1ed      	bne.n	8001b9c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d008      	beq.n	8001bde <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c38 <HAL_RCC_ClockConfig+0x264>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	4917      	ldr	r1, [pc, #92]	@ (8001c38 <HAL_RCC_ClockConfig+0x264>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d009      	beq.n	8001bfe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bea:	4b13      	ldr	r3, [pc, #76]	@ (8001c38 <HAL_RCC_ClockConfig+0x264>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	490f      	ldr	r1, [pc, #60]	@ (8001c38 <HAL_RCC_ClockConfig+0x264>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bfe:	f000 f825 	bl	8001c4c <HAL_RCC_GetSysClockFreq>
 8001c02:	4602      	mov	r2, r0
 8001c04:	4b0c      	ldr	r3, [pc, #48]	@ (8001c38 <HAL_RCC_ClockConfig+0x264>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	091b      	lsrs	r3, r3, #4
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	490c      	ldr	r1, [pc, #48]	@ (8001c40 <HAL_RCC_ClockConfig+0x26c>)
 8001c10:	5ccb      	ldrb	r3, [r1, r3]
 8001c12:	f003 031f 	and.w	r3, r3, #31
 8001c16:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c44 <HAL_RCC_ClockConfig+0x270>)
 8001c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c48 <HAL_RCC_ClockConfig+0x274>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe ff4e 	bl	8000ac4 <HAL_InitTick>
 8001c28:	4603      	mov	r3, r0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40022000 	.word	0x40022000
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	04c4b400 	.word	0x04c4b400
 8001c40:	08004084 	.word	0x08004084
 8001c44:	20000000 	.word	0x20000000
 8001c48:	20000004 	.word	0x20000004

08001c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b087      	sub	sp, #28
 8001c50:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001c52:	4b2c      	ldr	r3, [pc, #176]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 030c 	and.w	r3, r3, #12
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d102      	bne.n	8001c64 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	e047      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001c64:	4b27      	ldr	r3, [pc, #156]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 030c 	and.w	r3, r3, #12
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d102      	bne.n	8001c76 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c70:	4b26      	ldr	r3, [pc, #152]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	e03e      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001c76:	4b23      	ldr	r3, [pc, #140]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
 8001c7e:	2b0c      	cmp	r3, #12
 8001c80:	d136      	bne.n	8001cf0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c82:	4b20      	ldr	r3, [pc, #128]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	091b      	lsrs	r3, r3, #4
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	3301      	adds	r3, #1
 8001c98:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2b03      	cmp	r3, #3
 8001c9e:	d10c      	bne.n	8001cba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ca0:	4a1a      	ldr	r2, [pc, #104]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca8:	4a16      	ldr	r2, [pc, #88]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001caa:	68d2      	ldr	r2, [r2, #12]
 8001cac:	0a12      	lsrs	r2, r2, #8
 8001cae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001cb2:	fb02 f303 	mul.w	r3, r2, r3
 8001cb6:	617b      	str	r3, [r7, #20]
      break;
 8001cb8:	e00c      	b.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cba:	4a13      	ldr	r2, [pc, #76]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc2:	4a10      	ldr	r2, [pc, #64]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cc4:	68d2      	ldr	r2, [r2, #12]
 8001cc6:	0a12      	lsrs	r2, r2, #8
 8001cc8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001ccc:	fb02 f303 	mul.w	r3, r2, r3
 8001cd0:	617b      	str	r3, [r7, #20]
      break;
 8001cd2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	0e5b      	lsrs	r3, r3, #25
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	3301      	adds	r3, #1
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	e001      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001cf4:	693b      	ldr	r3, [r7, #16]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	371c      	adds	r7, #28
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	40021000 	.word	0x40021000
 8001d08:	00f42400 	.word	0x00f42400
 8001d0c:	016e3600 	.word	0x016e3600

08001d10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d14:	4b03      	ldr	r3, [pc, #12]	@ (8001d24 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	20000000 	.word	0x20000000

08001d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d2c:	f7ff fff0 	bl	8001d10 <HAL_RCC_GetHCLKFreq>
 8001d30:	4602      	mov	r2, r0
 8001d32:	4b06      	ldr	r3, [pc, #24]	@ (8001d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	0a1b      	lsrs	r3, r3, #8
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	4904      	ldr	r1, [pc, #16]	@ (8001d50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d3e:	5ccb      	ldrb	r3, [r1, r3]
 8001d40:	f003 031f 	and.w	r3, r3, #31
 8001d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	08004094 	.word	0x08004094

08001d54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d58:	f7ff ffda 	bl	8001d10 <HAL_RCC_GetHCLKFreq>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	0adb      	lsrs	r3, r3, #11
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	4904      	ldr	r1, [pc, #16]	@ (8001d7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d6a:	5ccb      	ldrb	r3, [r1, r3]
 8001d6c:	f003 031f 	and.w	r3, r3, #31
 8001d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	08004094 	.word	0x08004094

08001d80 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b087      	sub	sp, #28
 8001d84:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d86:	4b1e      	ldr	r3, [pc, #120]	@ (8001e00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d90:	4b1b      	ldr	r3, [pc, #108]	@ (8001e00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	091b      	lsrs	r3, r3, #4
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	2b03      	cmp	r3, #3
 8001da2:	d10c      	bne.n	8001dbe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001da4:	4a17      	ldr	r2, [pc, #92]	@ (8001e04 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dac:	4a14      	ldr	r2, [pc, #80]	@ (8001e00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dae:	68d2      	ldr	r2, [r2, #12]
 8001db0:	0a12      	lsrs	r2, r2, #8
 8001db2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001db6:	fb02 f303 	mul.w	r3, r2, r3
 8001dba:	617b      	str	r3, [r7, #20]
    break;
 8001dbc:	e00c      	b.n	8001dd8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dbe:	4a12      	ldr	r2, [pc, #72]	@ (8001e08 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc6:	4a0e      	ldr	r2, [pc, #56]	@ (8001e00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dc8:	68d2      	ldr	r2, [r2, #12]
 8001dca:	0a12      	lsrs	r2, r2, #8
 8001dcc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001dd0:	fb02 f303 	mul.w	r3, r2, r3
 8001dd4:	617b      	str	r3, [r7, #20]
    break;
 8001dd6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dd8:	4b09      	ldr	r3, [pc, #36]	@ (8001e00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	0e5b      	lsrs	r3, r3, #25
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	3301      	adds	r3, #1
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001df2:	687b      	ldr	r3, [r7, #4]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	371c      	adds	r7, #28
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	40021000 	.word	0x40021000
 8001e04:	016e3600 	.word	0x016e3600
 8001e08:	00f42400 	.word	0x00f42400

08001e0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e14:	2300      	movs	r3, #0
 8001e16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e18:	2300      	movs	r3, #0
 8001e1a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 8098 	beq.w	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e2e:	4b43      	ldr	r3, [pc, #268]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10d      	bne.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e3a:	4b40      	ldr	r3, [pc, #256]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e3e:	4a3f      	ldr	r2, [pc, #252]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e44:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e46:	4b3d      	ldr	r3, [pc, #244]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e52:	2301      	movs	r3, #1
 8001e54:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e56:	4b3a      	ldr	r3, [pc, #232]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a39      	ldr	r2, [pc, #228]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e62:	f7fe fe7b 	bl	8000b5c <HAL_GetTick>
 8001e66:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e68:	e009      	b.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e6a:	f7fe fe77 	bl	8000b5c <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d902      	bls.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	74fb      	strb	r3, [r7, #19]
        break;
 8001e7c:	e005      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e7e:	4b30      	ldr	r3, [pc, #192]	@ (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0ef      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001e8a:	7cfb      	ldrb	r3, [r7, #19]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d159      	bne.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e90:	4b2a      	ldr	r3, [pc, #168]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e9a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d01e      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d019      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001eac:	4b23      	ldr	r3, [pc, #140]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001eb6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001eb8:	4b20      	ldr	r3, [pc, #128]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ebe:	4a1f      	ldr	r2, [pc, #124]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ec4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ec8:	4b1c      	ldr	r3, [pc, #112]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ece:	4a1b      	ldr	r2, [pc, #108]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ed0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ed4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ed8:	4a18      	ldr	r2, [pc, #96]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d016      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eea:	f7fe fe37 	bl	8000b5c <HAL_GetTick>
 8001eee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ef0:	e00b      	b.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef2:	f7fe fe33 	bl	8000b5c <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d902      	bls.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	74fb      	strb	r3, [r7, #19]
            break;
 8001f08:	e006      	b.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0ec      	beq.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001f18:	7cfb      	ldrb	r3, [r7, #19]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10b      	bne.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f1e:	4b07      	ldr	r3, [pc, #28]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2c:	4903      	ldr	r1, [pc, #12]	@ (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001f34:	e008      	b.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f36:	7cfb      	ldrb	r3, [r7, #19]
 8001f38:	74bb      	strb	r3, [r7, #18]
 8001f3a:	e005      	b.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f44:	7cfb      	ldrb	r3, [r7, #19]
 8001f46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f48:	7c7b      	ldrb	r3, [r7, #17]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d105      	bne.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f4e:	4ba6      	ldr	r3, [pc, #664]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f52:	4aa5      	ldr	r2, [pc, #660]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f58:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00a      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f66:	4ba0      	ldr	r3, [pc, #640]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f6c:	f023 0203 	bic.w	r2, r3, #3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	499c      	ldr	r1, [pc, #624]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00a      	beq.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f88:	4b97      	ldr	r3, [pc, #604]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f8e:	f023 020c 	bic.w	r2, r3, #12
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	4994      	ldr	r1, [pc, #592]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00a      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001faa:	4b8f      	ldr	r3, [pc, #572]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fb0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	498b      	ldr	r1, [pc, #556]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0308 	and.w	r3, r3, #8
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00a      	beq.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001fcc:	4b86      	ldr	r3, [pc, #536]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fd2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	4983      	ldr	r1, [pc, #524]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0320 	and.w	r3, r3, #32
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00a      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fee:	4b7e      	ldr	r3, [pc, #504]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ff4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	497a      	ldr	r1, [pc, #488]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00a      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002010:	4b75      	ldr	r3, [pc, #468]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002016:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	4972      	ldr	r1, [pc, #456]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002020:	4313      	orrs	r3, r2
 8002022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00a      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002032:	4b6d      	ldr	r3, [pc, #436]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002038:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	4969      	ldr	r1, [pc, #420]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002042:	4313      	orrs	r3, r2
 8002044:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00a      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002054:	4b64      	ldr	r3, [pc, #400]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800205a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	4961      	ldr	r1, [pc, #388]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002064:	4313      	orrs	r3, r2
 8002066:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00a      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002076:	4b5c      	ldr	r3, [pc, #368]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800207c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002084:	4958      	ldr	r1, [pc, #352]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002086:	4313      	orrs	r3, r2
 8002088:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002094:	2b00      	cmp	r3, #0
 8002096:	d015      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002098:	4b53      	ldr	r3, [pc, #332]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800209a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800209e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a6:	4950      	ldr	r1, [pc, #320]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020b6:	d105      	bne.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020b8:	4b4b      	ldr	r3, [pc, #300]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	4a4a      	ldr	r2, [pc, #296]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020c2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d015      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80020d0:	4b45      	ldr	r3, [pc, #276]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020de:	4942      	ldr	r1, [pc, #264]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020ee:	d105      	bne.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020f0:	4b3d      	ldr	r3, [pc, #244]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	4a3c      	ldr	r2, [pc, #240]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020fa:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d015      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002108:	4b37      	ldr	r3, [pc, #220]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800210a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002116:	4934      	ldr	r1, [pc, #208]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002118:	4313      	orrs	r3, r2
 800211a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002122:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002126:	d105      	bne.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002128:	4b2f      	ldr	r3, [pc, #188]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	4a2e      	ldr	r2, [pc, #184]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800212e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002132:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d015      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002140:	4b29      	ldr	r3, [pc, #164]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002146:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800214e:	4926      	ldr	r1, [pc, #152]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800215a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800215e:	d105      	bne.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002160:	4b21      	ldr	r3, [pc, #132]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	4a20      	ldr	r2, [pc, #128]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002166:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800216a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d015      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002178:	4b1b      	ldr	r3, [pc, #108]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800217e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002186:	4918      	ldr	r1, [pc, #96]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002188:	4313      	orrs	r3, r2
 800218a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002192:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002196:	d105      	bne.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002198:	4b13      	ldr	r3, [pc, #76]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	4a12      	ldr	r2, [pc, #72]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800219e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d015      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80021b0:	4b0d      	ldr	r3, [pc, #52]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021be:	490a      	ldr	r1, [pc, #40]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021ce:	d105      	bne.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80021d0:	4b05      	ldr	r3, [pc, #20]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	4a04      	ldr	r2, [pc, #16]	@ (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021da:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80021dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40021000 	.word	0x40021000

080021ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e042      	b.n	8002284 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002204:	2b00      	cmp	r3, #0
 8002206:	d106      	bne.n	8002216 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7fe fbb5 	bl	8000980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2224      	movs	r2, #36	@ 0x24
 800221a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0201 	bic.w	r2, r2, #1
 800222c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002232:	2b00      	cmp	r3, #0
 8002234:	d002      	beq.n	800223c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 fee4 	bl	8003004 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 fc15 	bl	8002a6c <UART_SetConfig>
 8002242:	4603      	mov	r3, r0
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e01b      	b.n	8002284 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800225a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800226a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0201 	orr.w	r2, r2, #1
 800227a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 ff63 	bl	8003148 <UART_CheckIdleState>
 8002282:	4603      	mov	r3, r0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08a      	sub	sp, #40	@ 0x28
 8002290:	af02      	add	r7, sp, #8
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	603b      	str	r3, [r7, #0]
 8002298:	4613      	mov	r3, r2
 800229a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a2:	2b20      	cmp	r3, #32
 80022a4:	d17b      	bne.n	800239e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d002      	beq.n	80022b2 <HAL_UART_Transmit+0x26>
 80022ac:	88fb      	ldrh	r3, [r7, #6]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e074      	b.n	80023a0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2221      	movs	r2, #33	@ 0x21
 80022c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022c6:	f7fe fc49 	bl	8000b5c <HAL_GetTick>
 80022ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	88fa      	ldrh	r2, [r7, #6]
 80022d0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	88fa      	ldrh	r2, [r7, #6]
 80022d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022e4:	d108      	bne.n	80022f8 <HAL_UART_Transmit+0x6c>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d104      	bne.n	80022f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	61bb      	str	r3, [r7, #24]
 80022f6:	e003      	b.n	8002300 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002300:	e030      	b.n	8002364 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2200      	movs	r2, #0
 800230a:	2180      	movs	r1, #128	@ 0x80
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 ffc5 	bl	800329c <UART_WaitOnFlagUntilTimeout>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2220      	movs	r2, #32
 800231c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e03d      	b.n	80023a0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10b      	bne.n	8002342 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002338:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	3302      	adds	r3, #2
 800233e:	61bb      	str	r3, [r7, #24]
 8002340:	e007      	b.n	8002352 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	781a      	ldrb	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	3301      	adds	r3, #1
 8002350:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002358:	b29b      	uxth	r3, r3
 800235a:	3b01      	subs	r3, #1
 800235c:	b29a      	uxth	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800236a:	b29b      	uxth	r3, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1c8      	bne.n	8002302 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	2200      	movs	r2, #0
 8002378:	2140      	movs	r1, #64	@ 0x40
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 ff8e 	bl	800329c <UART_WaitOnFlagUntilTimeout>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d005      	beq.n	8002392 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2220      	movs	r2, #32
 800238a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e006      	b.n	80023a0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2220      	movs	r2, #32
 8002396:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800239a:	2300      	movs	r3, #0
 800239c:	e000      	b.n	80023a0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800239e:	2302      	movs	r3, #2
  }
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3720      	adds	r7, #32
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b0ba      	sub	sp, #232	@ 0xe8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80023ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80023d2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80023d6:	4013      	ands	r3, r2
 80023d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80023dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d11b      	bne.n	800241c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80023e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023e8:	f003 0320 	and.w	r3, r3, #32
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d015      	beq.n	800241c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80023f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023f4:	f003 0320 	and.w	r3, r3, #32
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d105      	bne.n	8002408 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80023fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002400:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d009      	beq.n	800241c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 8300 	beq.w	8002a12 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	4798      	blx	r3
      }
      return;
 800241a:	e2fa      	b.n	8002a12 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800241c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 8123 	beq.w	800266c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002426:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800242a:	4b8d      	ldr	r3, [pc, #564]	@ (8002660 <HAL_UART_IRQHandler+0x2b8>)
 800242c:	4013      	ands	r3, r2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d106      	bne.n	8002440 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002432:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002436:	4b8b      	ldr	r3, [pc, #556]	@ (8002664 <HAL_UART_IRQHandler+0x2bc>)
 8002438:	4013      	ands	r3, r2
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 8116 	beq.w	800266c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b00      	cmp	r3, #0
 800244a:	d011      	beq.n	8002470 <HAL_UART_IRQHandler+0xc8>
 800244c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00b      	beq.n	8002470 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2201      	movs	r2, #1
 800245e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002466:	f043 0201 	orr.w	r2, r3, #1
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d011      	beq.n	80024a0 <HAL_UART_IRQHandler+0xf8>
 800247c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00b      	beq.n	80024a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2202      	movs	r2, #2
 800248e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002496:	f043 0204 	orr.w	r2, r3, #4
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80024a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d011      	beq.n	80024d0 <HAL_UART_IRQHandler+0x128>
 80024ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00b      	beq.n	80024d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2204      	movs	r2, #4
 80024be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024c6:	f043 0202 	orr.w	r2, r3, #2
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80024d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024d4:	f003 0308 	and.w	r3, r3, #8
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d017      	beq.n	800250c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80024dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024e0:	f003 0320 	and.w	r3, r3, #32
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d105      	bne.n	80024f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80024e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80024ec:	4b5c      	ldr	r3, [pc, #368]	@ (8002660 <HAL_UART_IRQHandler+0x2b8>)
 80024ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00b      	beq.n	800250c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2208      	movs	r2, #8
 80024fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002502:	f043 0208 	orr.w	r2, r3, #8
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800250c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002510:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002514:	2b00      	cmp	r3, #0
 8002516:	d012      	beq.n	800253e <HAL_UART_IRQHandler+0x196>
 8002518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800251c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00c      	beq.n	800253e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800252c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002534:	f043 0220 	orr.w	r2, r3, #32
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 8266 	beq.w	8002a16 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800254a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800254e:	f003 0320 	and.w	r3, r3, #32
 8002552:	2b00      	cmp	r3, #0
 8002554:	d013      	beq.n	800257e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800255a:	f003 0320 	and.w	r3, r3, #32
 800255e:	2b00      	cmp	r3, #0
 8002560:	d105      	bne.n	800256e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d007      	beq.n	800257e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002584:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002592:	2b40      	cmp	r3, #64	@ 0x40
 8002594:	d005      	beq.n	80025a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002596:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800259a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d054      	beq.n	800264c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 fee7 	bl	8003376 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025b2:	2b40      	cmp	r3, #64	@ 0x40
 80025b4:	d146      	bne.n	8002644 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	3308      	adds	r3, #8
 80025bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025c4:	e853 3f00 	ldrex	r3, [r3]
 80025c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80025cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80025d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	3308      	adds	r3, #8
 80025de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80025e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80025e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80025ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80025f2:	e841 2300 	strex	r3, r2, [r1]
 80025f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80025fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1d9      	bne.n	80025b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002608:	2b00      	cmp	r3, #0
 800260a:	d017      	beq.n	800263c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002612:	4a15      	ldr	r2, [pc, #84]	@ (8002668 <HAL_UART_IRQHandler+0x2c0>)
 8002614:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800261c:	4618      	mov	r0, r3
 800261e:	f7fe fc11 	bl	8000e44 <HAL_DMA_Abort_IT>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d019      	beq.n	800265c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800262e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8002636:	4610      	mov	r0, r2
 8002638:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800263a:	e00f      	b.n	800265c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 f9ff 	bl	8002a40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002642:	e00b      	b.n	800265c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 f9fb 	bl	8002a40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800264a:	e007      	b.n	800265c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f9f7 	bl	8002a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800265a:	e1dc      	b.n	8002a16 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800265c:	bf00      	nop
    return;
 800265e:	e1da      	b.n	8002a16 <HAL_UART_IRQHandler+0x66e>
 8002660:	10000001 	.word	0x10000001
 8002664:	04000120 	.word	0x04000120
 8002668:	08003443 	.word	0x08003443

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002670:	2b01      	cmp	r3, #1
 8002672:	f040 8170 	bne.w	8002956 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 8169 	beq.w	8002956 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002688:	f003 0310 	and.w	r3, r3, #16
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 8162 	beq.w	8002956 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2210      	movs	r2, #16
 8002698:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a4:	2b40      	cmp	r3, #64	@ 0x40
 80026a6:	f040 80d8 	bne.w	800285a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80026b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 80af 	beq.w	8002820 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80026c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80026cc:	429a      	cmp	r2, r3
 80026ce:	f080 80a7 	bcs.w	8002820 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80026d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0320 	and.w	r3, r3, #32
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f040 8087 	bne.w	80027fe <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80026fc:	e853 3f00 	ldrex	r3, [r3]
 8002700:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002704:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002708:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800270c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	461a      	mov	r2, r3
 8002716:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800271a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800271e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002722:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002726:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800272a:	e841 2300 	strex	r3, r2, [r1]
 800272e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002732:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1da      	bne.n	80026f0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	3308      	adds	r3, #8
 8002740:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002742:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002744:	e853 3f00 	ldrex	r3, [r3]
 8002748:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800274a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800274c:	f023 0301 	bic.w	r3, r3, #1
 8002750:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	3308      	adds	r3, #8
 800275a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800275e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002762:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002764:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002766:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800276a:	e841 2300 	strex	r3, r2, [r1]
 800276e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002770:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1e1      	bne.n	800273a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	3308      	adds	r3, #8
 800277c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800277e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002780:	e853 3f00 	ldrex	r3, [r3]
 8002784:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002786:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002788:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800278c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	3308      	adds	r3, #8
 8002796:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800279a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800279c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800279e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80027a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80027a2:	e841 2300 	strex	r3, r2, [r1]
 80027a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80027a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1e3      	bne.n	8002776 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2220      	movs	r2, #32
 80027b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027c4:	e853 3f00 	ldrex	r3, [r3]
 80027c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80027ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027cc:	f023 0310 	bic.w	r3, r3, #16
 80027d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80027e0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80027e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80027e6:	e841 2300 	strex	r3, r2, [r1]
 80027ea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80027ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1e4      	bne.n	80027bc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7fe faca 	bl	8000d92 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2202      	movs	r2, #2
 8002802:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002810:	b29b      	uxth	r3, r3
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	b29b      	uxth	r3, r3
 8002816:	4619      	mov	r1, r3
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f91b 	bl	8002a54 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800281e:	e0fc      	b.n	8002a1a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002826:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800282a:	429a      	cmp	r2, r3
 800282c:	f040 80f5 	bne.w	8002a1a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0320 	and.w	r3, r3, #32
 800283e:	2b20      	cmp	r3, #32
 8002840:	f040 80eb 	bne.w	8002a1a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2202      	movs	r2, #2
 8002848:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002850:	4619      	mov	r1, r3
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f8fe 	bl	8002a54 <HAL_UARTEx_RxEventCallback>
      return;
 8002858:	e0df      	b.n	8002a1a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002866:	b29b      	uxth	r3, r3
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002874:	b29b      	uxth	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 80d1 	beq.w	8002a1e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800287c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 80cc 	beq.w	8002a1e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800288c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800288e:	e853 3f00 	ldrex	r3, [r3]
 8002892:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002896:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800289a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	461a      	mov	r2, r3
 80028a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80028a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80028aa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80028ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028b0:	e841 2300 	strex	r3, r2, [r1]
 80028b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80028b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1e4      	bne.n	8002886 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	3308      	adds	r3, #8
 80028c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c6:	e853 3f00 	ldrex	r3, [r3]
 80028ca:	623b      	str	r3, [r7, #32]
   return(result);
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028d2:	f023 0301 	bic.w	r3, r3, #1
 80028d6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	3308      	adds	r3, #8
 80028e0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80028e4:	633a      	str	r2, [r7, #48]	@ 0x30
 80028e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80028ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028ec:	e841 2300 	strex	r3, r2, [r1]
 80028f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80028f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1e1      	bne.n	80028bc <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2220      	movs	r2, #32
 80028fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	e853 3f00 	ldrex	r3, [r3]
 8002918:	60fb      	str	r3, [r7, #12]
   return(result);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f023 0310 	bic.w	r3, r3, #16
 8002920:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	461a      	mov	r2, r3
 800292a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800292e:	61fb      	str	r3, [r7, #28]
 8002930:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002932:	69b9      	ldr	r1, [r7, #24]
 8002934:	69fa      	ldr	r2, [r7, #28]
 8002936:	e841 2300 	strex	r3, r2, [r1]
 800293a:	617b      	str	r3, [r7, #20]
   return(result);
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1e4      	bne.n	800290c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2202      	movs	r2, #2
 8002946:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002948:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800294c:	4619      	mov	r1, r3
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f880 	bl	8002a54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002954:	e063      	b.n	8002a1e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800295a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00e      	beq.n	8002980 <HAL_UART_IRQHandler+0x5d8>
 8002962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002966:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d008      	beq.n	8002980 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002976:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 fd9f 	bl	80034bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800297e:	e051      	b.n	8002a24 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002984:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002988:	2b00      	cmp	r3, #0
 800298a:	d014      	beq.n	80029b6 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800298c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002990:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002994:	2b00      	cmp	r3, #0
 8002996:	d105      	bne.n	80029a4 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800299c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d008      	beq.n	80029b6 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d03a      	beq.n	8002a22 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	4798      	blx	r3
    }
    return;
 80029b4:	e035      	b.n	8002a22 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80029b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d009      	beq.n	80029d6 <HAL_UART_IRQHandler+0x62e>
 80029c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 fd49 	bl	8003466 <UART_EndTransmit_IT>
    return;
 80029d4:	e026      	b.n	8002a24 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80029d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d009      	beq.n	80029f6 <HAL_UART_IRQHandler+0x64e>
 80029e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029e6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 fd78 	bl	80034e4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80029f4:	e016      	b.n	8002a24 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80029f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d010      	beq.n	8002a24 <HAL_UART_IRQHandler+0x67c>
 8002a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	da0c      	bge.n	8002a24 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 fd60 	bl	80034d0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002a10:	e008      	b.n	8002a24 <HAL_UART_IRQHandler+0x67c>
      return;
 8002a12:	bf00      	nop
 8002a14:	e006      	b.n	8002a24 <HAL_UART_IRQHandler+0x67c>
    return;
 8002a16:	bf00      	nop
 8002a18:	e004      	b.n	8002a24 <HAL_UART_IRQHandler+0x67c>
      return;
 8002a1a:	bf00      	nop
 8002a1c:	e002      	b.n	8002a24 <HAL_UART_IRQHandler+0x67c>
      return;
 8002a1e:	bf00      	nop
 8002a20:	e000      	b.n	8002a24 <HAL_UART_IRQHandler+0x67c>
    return;
 8002a22:	bf00      	nop
  }
}
 8002a24:	37e8      	adds	r7, #232	@ 0xe8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop

08002a2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a70:	b08c      	sub	sp, #48	@ 0x30
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a76:	2300      	movs	r3, #0
 8002a78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	431a      	orrs	r2, r3
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	4bab      	ldr	r3, [pc, #684]	@ (8002d48 <UART_SetConfig+0x2dc>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	6812      	ldr	r2, [r2, #0]
 8002aa2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002aa4:	430b      	orrs	r3, r1
 8002aa6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4aa0      	ldr	r2, [pc, #640]	@ (8002d4c <UART_SetConfig+0x2e0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d004      	beq.n	8002ad8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002ae2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	6812      	ldr	r2, [r2, #0]
 8002aea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002aec:	430b      	orrs	r3, r1
 8002aee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af6:	f023 010f 	bic.w	r1, r3, #15
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a91      	ldr	r2, [pc, #580]	@ (8002d50 <UART_SetConfig+0x2e4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d125      	bne.n	8002b5c <UART_SetConfig+0xf0>
 8002b10:	4b90      	ldr	r3, [pc, #576]	@ (8002d54 <UART_SetConfig+0x2e8>)
 8002b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	2b03      	cmp	r3, #3
 8002b1c:	d81a      	bhi.n	8002b54 <UART_SetConfig+0xe8>
 8002b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b24 <UART_SetConfig+0xb8>)
 8002b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b24:	08002b35 	.word	0x08002b35
 8002b28:	08002b45 	.word	0x08002b45
 8002b2c:	08002b3d 	.word	0x08002b3d
 8002b30:	08002b4d 	.word	0x08002b4d
 8002b34:	2301      	movs	r3, #1
 8002b36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b3a:	e0d6      	b.n	8002cea <UART_SetConfig+0x27e>
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b42:	e0d2      	b.n	8002cea <UART_SetConfig+0x27e>
 8002b44:	2304      	movs	r3, #4
 8002b46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b4a:	e0ce      	b.n	8002cea <UART_SetConfig+0x27e>
 8002b4c:	2308      	movs	r3, #8
 8002b4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b52:	e0ca      	b.n	8002cea <UART_SetConfig+0x27e>
 8002b54:	2310      	movs	r3, #16
 8002b56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b5a:	e0c6      	b.n	8002cea <UART_SetConfig+0x27e>
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a7d      	ldr	r2, [pc, #500]	@ (8002d58 <UART_SetConfig+0x2ec>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d138      	bne.n	8002bd8 <UART_SetConfig+0x16c>
 8002b66:	4b7b      	ldr	r3, [pc, #492]	@ (8002d54 <UART_SetConfig+0x2e8>)
 8002b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b6c:	f003 030c 	and.w	r3, r3, #12
 8002b70:	2b0c      	cmp	r3, #12
 8002b72:	d82d      	bhi.n	8002bd0 <UART_SetConfig+0x164>
 8002b74:	a201      	add	r2, pc, #4	@ (adr r2, 8002b7c <UART_SetConfig+0x110>)
 8002b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b7a:	bf00      	nop
 8002b7c:	08002bb1 	.word	0x08002bb1
 8002b80:	08002bd1 	.word	0x08002bd1
 8002b84:	08002bd1 	.word	0x08002bd1
 8002b88:	08002bd1 	.word	0x08002bd1
 8002b8c:	08002bc1 	.word	0x08002bc1
 8002b90:	08002bd1 	.word	0x08002bd1
 8002b94:	08002bd1 	.word	0x08002bd1
 8002b98:	08002bd1 	.word	0x08002bd1
 8002b9c:	08002bb9 	.word	0x08002bb9
 8002ba0:	08002bd1 	.word	0x08002bd1
 8002ba4:	08002bd1 	.word	0x08002bd1
 8002ba8:	08002bd1 	.word	0x08002bd1
 8002bac:	08002bc9 	.word	0x08002bc9
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bb6:	e098      	b.n	8002cea <UART_SetConfig+0x27e>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bbe:	e094      	b.n	8002cea <UART_SetConfig+0x27e>
 8002bc0:	2304      	movs	r3, #4
 8002bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bc6:	e090      	b.n	8002cea <UART_SetConfig+0x27e>
 8002bc8:	2308      	movs	r3, #8
 8002bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bce:	e08c      	b.n	8002cea <UART_SetConfig+0x27e>
 8002bd0:	2310      	movs	r3, #16
 8002bd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bd6:	e088      	b.n	8002cea <UART_SetConfig+0x27e>
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a5f      	ldr	r2, [pc, #380]	@ (8002d5c <UART_SetConfig+0x2f0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d125      	bne.n	8002c2e <UART_SetConfig+0x1c2>
 8002be2:	4b5c      	ldr	r3, [pc, #368]	@ (8002d54 <UART_SetConfig+0x2e8>)
 8002be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002bec:	2b30      	cmp	r3, #48	@ 0x30
 8002bee:	d016      	beq.n	8002c1e <UART_SetConfig+0x1b2>
 8002bf0:	2b30      	cmp	r3, #48	@ 0x30
 8002bf2:	d818      	bhi.n	8002c26 <UART_SetConfig+0x1ba>
 8002bf4:	2b20      	cmp	r3, #32
 8002bf6:	d00a      	beq.n	8002c0e <UART_SetConfig+0x1a2>
 8002bf8:	2b20      	cmp	r3, #32
 8002bfa:	d814      	bhi.n	8002c26 <UART_SetConfig+0x1ba>
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d002      	beq.n	8002c06 <UART_SetConfig+0x19a>
 8002c00:	2b10      	cmp	r3, #16
 8002c02:	d008      	beq.n	8002c16 <UART_SetConfig+0x1aa>
 8002c04:	e00f      	b.n	8002c26 <UART_SetConfig+0x1ba>
 8002c06:	2300      	movs	r3, #0
 8002c08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c0c:	e06d      	b.n	8002cea <UART_SetConfig+0x27e>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c14:	e069      	b.n	8002cea <UART_SetConfig+0x27e>
 8002c16:	2304      	movs	r3, #4
 8002c18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c1c:	e065      	b.n	8002cea <UART_SetConfig+0x27e>
 8002c1e:	2308      	movs	r3, #8
 8002c20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c24:	e061      	b.n	8002cea <UART_SetConfig+0x27e>
 8002c26:	2310      	movs	r3, #16
 8002c28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c2c:	e05d      	b.n	8002cea <UART_SetConfig+0x27e>
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a4b      	ldr	r2, [pc, #300]	@ (8002d60 <UART_SetConfig+0x2f4>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d125      	bne.n	8002c84 <UART_SetConfig+0x218>
 8002c38:	4b46      	ldr	r3, [pc, #280]	@ (8002d54 <UART_SetConfig+0x2e8>)
 8002c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c3e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002c42:	2bc0      	cmp	r3, #192	@ 0xc0
 8002c44:	d016      	beq.n	8002c74 <UART_SetConfig+0x208>
 8002c46:	2bc0      	cmp	r3, #192	@ 0xc0
 8002c48:	d818      	bhi.n	8002c7c <UART_SetConfig+0x210>
 8002c4a:	2b80      	cmp	r3, #128	@ 0x80
 8002c4c:	d00a      	beq.n	8002c64 <UART_SetConfig+0x1f8>
 8002c4e:	2b80      	cmp	r3, #128	@ 0x80
 8002c50:	d814      	bhi.n	8002c7c <UART_SetConfig+0x210>
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d002      	beq.n	8002c5c <UART_SetConfig+0x1f0>
 8002c56:	2b40      	cmp	r3, #64	@ 0x40
 8002c58:	d008      	beq.n	8002c6c <UART_SetConfig+0x200>
 8002c5a:	e00f      	b.n	8002c7c <UART_SetConfig+0x210>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c62:	e042      	b.n	8002cea <UART_SetConfig+0x27e>
 8002c64:	2302      	movs	r3, #2
 8002c66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c6a:	e03e      	b.n	8002cea <UART_SetConfig+0x27e>
 8002c6c:	2304      	movs	r3, #4
 8002c6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c72:	e03a      	b.n	8002cea <UART_SetConfig+0x27e>
 8002c74:	2308      	movs	r3, #8
 8002c76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c7a:	e036      	b.n	8002cea <UART_SetConfig+0x27e>
 8002c7c:	2310      	movs	r3, #16
 8002c7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c82:	e032      	b.n	8002cea <UART_SetConfig+0x27e>
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a30      	ldr	r2, [pc, #192]	@ (8002d4c <UART_SetConfig+0x2e0>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d12a      	bne.n	8002ce4 <UART_SetConfig+0x278>
 8002c8e:	4b31      	ldr	r3, [pc, #196]	@ (8002d54 <UART_SetConfig+0x2e8>)
 8002c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c94:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002c98:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002c9c:	d01a      	beq.n	8002cd4 <UART_SetConfig+0x268>
 8002c9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ca2:	d81b      	bhi.n	8002cdc <UART_SetConfig+0x270>
 8002ca4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ca8:	d00c      	beq.n	8002cc4 <UART_SetConfig+0x258>
 8002caa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cae:	d815      	bhi.n	8002cdc <UART_SetConfig+0x270>
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <UART_SetConfig+0x250>
 8002cb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cb8:	d008      	beq.n	8002ccc <UART_SetConfig+0x260>
 8002cba:	e00f      	b.n	8002cdc <UART_SetConfig+0x270>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cc2:	e012      	b.n	8002cea <UART_SetConfig+0x27e>
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cca:	e00e      	b.n	8002cea <UART_SetConfig+0x27e>
 8002ccc:	2304      	movs	r3, #4
 8002cce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cd2:	e00a      	b.n	8002cea <UART_SetConfig+0x27e>
 8002cd4:	2308      	movs	r3, #8
 8002cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cda:	e006      	b.n	8002cea <UART_SetConfig+0x27e>
 8002cdc:	2310      	movs	r3, #16
 8002cde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ce2:	e002      	b.n	8002cea <UART_SetConfig+0x27e>
 8002ce4:	2310      	movs	r3, #16
 8002ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a17      	ldr	r2, [pc, #92]	@ (8002d4c <UART_SetConfig+0x2e0>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	f040 80a8 	bne.w	8002e46 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002cf6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d834      	bhi.n	8002d68 <UART_SetConfig+0x2fc>
 8002cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8002d04 <UART_SetConfig+0x298>)
 8002d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d04:	08002d29 	.word	0x08002d29
 8002d08:	08002d69 	.word	0x08002d69
 8002d0c:	08002d31 	.word	0x08002d31
 8002d10:	08002d69 	.word	0x08002d69
 8002d14:	08002d37 	.word	0x08002d37
 8002d18:	08002d69 	.word	0x08002d69
 8002d1c:	08002d69 	.word	0x08002d69
 8002d20:	08002d69 	.word	0x08002d69
 8002d24:	08002d3f 	.word	0x08002d3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d28:	f7fe fffe 	bl	8001d28 <HAL_RCC_GetPCLK1Freq>
 8002d2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002d2e:	e021      	b.n	8002d74 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d30:	4b0c      	ldr	r3, [pc, #48]	@ (8002d64 <UART_SetConfig+0x2f8>)
 8002d32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002d34:	e01e      	b.n	8002d74 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d36:	f7fe ff89 	bl	8001c4c <HAL_RCC_GetSysClockFreq>
 8002d3a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002d3c:	e01a      	b.n	8002d74 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002d44:	e016      	b.n	8002d74 <UART_SetConfig+0x308>
 8002d46:	bf00      	nop
 8002d48:	cfff69f3 	.word	0xcfff69f3
 8002d4c:	40008000 	.word	0x40008000
 8002d50:	40013800 	.word	0x40013800
 8002d54:	40021000 	.word	0x40021000
 8002d58:	40004400 	.word	0x40004400
 8002d5c:	40004800 	.word	0x40004800
 8002d60:	40004c00 	.word	0x40004c00
 8002d64:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002d72:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 812a 	beq.w	8002fd0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d80:	4a9e      	ldr	r2, [pc, #632]	@ (8002ffc <UART_SetConfig+0x590>)
 8002d82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d86:	461a      	mov	r2, r3
 8002d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	4613      	mov	r3, r2
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	4413      	add	r3, r2
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d305      	bcc.n	8002dac <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d903      	bls.n	8002db4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002db2:	e10d      	b.n	8002fd0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db6:	2200      	movs	r2, #0
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	60fa      	str	r2, [r7, #12]
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc0:	4a8e      	ldr	r2, [pc, #568]	@ (8002ffc <UART_SetConfig+0x590>)
 8002dc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	2200      	movs	r2, #0
 8002dca:	603b      	str	r3, [r7, #0]
 8002dcc:	607a      	str	r2, [r7, #4]
 8002dce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002dd2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002dd6:	f7fd fa1f 	bl	8000218 <__aeabi_uldivmod>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	4610      	mov	r0, r2
 8002de0:	4619      	mov	r1, r3
 8002de2:	f04f 0200 	mov.w	r2, #0
 8002de6:	f04f 0300 	mov.w	r3, #0
 8002dea:	020b      	lsls	r3, r1, #8
 8002dec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002df0:	0202      	lsls	r2, r0, #8
 8002df2:	6979      	ldr	r1, [r7, #20]
 8002df4:	6849      	ldr	r1, [r1, #4]
 8002df6:	0849      	lsrs	r1, r1, #1
 8002df8:	2000      	movs	r0, #0
 8002dfa:	460c      	mov	r4, r1
 8002dfc:	4605      	mov	r5, r0
 8002dfe:	eb12 0804 	adds.w	r8, r2, r4
 8002e02:	eb43 0905 	adc.w	r9, r3, r5
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	469a      	mov	sl, r3
 8002e0e:	4693      	mov	fp, r2
 8002e10:	4652      	mov	r2, sl
 8002e12:	465b      	mov	r3, fp
 8002e14:	4640      	mov	r0, r8
 8002e16:	4649      	mov	r1, r9
 8002e18:	f7fd f9fe 	bl	8000218 <__aeabi_uldivmod>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4613      	mov	r3, r2
 8002e22:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e2a:	d308      	bcc.n	8002e3e <UART_SetConfig+0x3d2>
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e32:	d204      	bcs.n	8002e3e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6a3a      	ldr	r2, [r7, #32]
 8002e3a:	60da      	str	r2, [r3, #12]
 8002e3c:	e0c8      	b.n	8002fd0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002e44:	e0c4      	b.n	8002fd0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e4e:	d167      	bne.n	8002f20 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002e50:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d828      	bhi.n	8002eaa <UART_SetConfig+0x43e>
 8002e58:	a201      	add	r2, pc, #4	@ (adr r2, 8002e60 <UART_SetConfig+0x3f4>)
 8002e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5e:	bf00      	nop
 8002e60:	08002e85 	.word	0x08002e85
 8002e64:	08002e8d 	.word	0x08002e8d
 8002e68:	08002e95 	.word	0x08002e95
 8002e6c:	08002eab 	.word	0x08002eab
 8002e70:	08002e9b 	.word	0x08002e9b
 8002e74:	08002eab 	.word	0x08002eab
 8002e78:	08002eab 	.word	0x08002eab
 8002e7c:	08002eab 	.word	0x08002eab
 8002e80:	08002ea3 	.word	0x08002ea3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e84:	f7fe ff50 	bl	8001d28 <HAL_RCC_GetPCLK1Freq>
 8002e88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e8a:	e014      	b.n	8002eb6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e8c:	f7fe ff62 	bl	8001d54 <HAL_RCC_GetPCLK2Freq>
 8002e90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e92:	e010      	b.n	8002eb6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e94:	4b5a      	ldr	r3, [pc, #360]	@ (8003000 <UART_SetConfig+0x594>)
 8002e96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002e98:	e00d      	b.n	8002eb6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e9a:	f7fe fed7 	bl	8001c4c <HAL_RCC_GetSysClockFreq>
 8002e9e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002ea0:	e009      	b.n	8002eb6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ea2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ea6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002ea8:	e005      	b.n	8002eb6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002eb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 8089 	beq.w	8002fd0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec2:	4a4e      	ldr	r2, [pc, #312]	@ (8002ffc <UART_SetConfig+0x590>)
 8002ec4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ecc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ed0:	005a      	lsls	r2, r3, #1
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	085b      	lsrs	r3, r3, #1
 8002ed8:	441a      	add	r2, r3
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	2b0f      	cmp	r3, #15
 8002ee8:	d916      	bls.n	8002f18 <UART_SetConfig+0x4ac>
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ef0:	d212      	bcs.n	8002f18 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	f023 030f 	bic.w	r3, r3, #15
 8002efa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002efc:	6a3b      	ldr	r3, [r7, #32]
 8002efe:	085b      	lsrs	r3, r3, #1
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	f003 0307 	and.w	r3, r3, #7
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	8bfb      	ldrh	r3, [r7, #30]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	8bfa      	ldrh	r2, [r7, #30]
 8002f14:	60da      	str	r2, [r3, #12]
 8002f16:	e05b      	b.n	8002fd0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002f1e:	e057      	b.n	8002fd0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f20:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d828      	bhi.n	8002f7a <UART_SetConfig+0x50e>
 8002f28:	a201      	add	r2, pc, #4	@ (adr r2, 8002f30 <UART_SetConfig+0x4c4>)
 8002f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2e:	bf00      	nop
 8002f30:	08002f55 	.word	0x08002f55
 8002f34:	08002f5d 	.word	0x08002f5d
 8002f38:	08002f65 	.word	0x08002f65
 8002f3c:	08002f7b 	.word	0x08002f7b
 8002f40:	08002f6b 	.word	0x08002f6b
 8002f44:	08002f7b 	.word	0x08002f7b
 8002f48:	08002f7b 	.word	0x08002f7b
 8002f4c:	08002f7b 	.word	0x08002f7b
 8002f50:	08002f73 	.word	0x08002f73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f54:	f7fe fee8 	bl	8001d28 <HAL_RCC_GetPCLK1Freq>
 8002f58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f5a:	e014      	b.n	8002f86 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f5c:	f7fe fefa 	bl	8001d54 <HAL_RCC_GetPCLK2Freq>
 8002f60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f62:	e010      	b.n	8002f86 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f64:	4b26      	ldr	r3, [pc, #152]	@ (8003000 <UART_SetConfig+0x594>)
 8002f66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002f68:	e00d      	b.n	8002f86 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f6a:	f7fe fe6f 	bl	8001c4c <HAL_RCC_GetSysClockFreq>
 8002f6e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f70:	e009      	b.n	8002f86 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002f78:	e005      	b.n	8002f86 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002f84:	bf00      	nop
    }

    if (pclk != 0U)
 8002f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d021      	beq.n	8002fd0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f90:	4a1a      	ldr	r2, [pc, #104]	@ (8002ffc <UART_SetConfig+0x590>)
 8002f92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f96:	461a      	mov	r2, r3
 8002f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9a:	fbb3 f2f2 	udiv	r2, r3, r2
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	085b      	lsrs	r3, r3, #1
 8002fa4:	441a      	add	r2, r3
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	2b0f      	cmp	r3, #15
 8002fb4:	d909      	bls.n	8002fca <UART_SetConfig+0x55e>
 8002fb6:	6a3b      	ldr	r3, [r7, #32]
 8002fb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fbc:	d205      	bcs.n	8002fca <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002fbe:	6a3b      	ldr	r3, [r7, #32]
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	60da      	str	r2, [r3, #12]
 8002fc8:	e002      	b.n	8002fd0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002fec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3730      	adds	r7, #48	@ 0x30
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ffa:	bf00      	nop
 8002ffc:	0800409c 	.word	0x0800409c
 8003000:	00f42400 	.word	0x00f42400

08003004 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003010:	f003 0308 	and.w	r3, r3, #8
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00a      	beq.n	800302e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00a      	beq.n	8003050 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00a      	beq.n	8003072 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003076:	f003 0304 	and.w	r3, r3, #4
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00a      	beq.n	8003094 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003098:	f003 0310 	and.w	r3, r3, #16
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00a      	beq.n	80030b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ba:	f003 0320 	and.w	r3, r3, #32
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00a      	beq.n	80030d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d01a      	beq.n	800311a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003102:	d10a      	bne.n	800311a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800311e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00a      	beq.n	800313c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	605a      	str	r2, [r3, #4]
  }
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b098      	sub	sp, #96	@ 0x60
 800314c:	af02      	add	r7, sp, #8
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003158:	f7fd fd00 	bl	8000b5c <HAL_GetTick>
 800315c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0308 	and.w	r3, r3, #8
 8003168:	2b08      	cmp	r3, #8
 800316a:	d12f      	bne.n	80031cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800316c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003174:	2200      	movs	r2, #0
 8003176:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f88e 	bl	800329c <UART_WaitOnFlagUntilTimeout>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d022      	beq.n	80031cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800318c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800318e:	e853 3f00 	ldrex	r3, [r3]
 8003192:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003196:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800319a:	653b      	str	r3, [r7, #80]	@ 0x50
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	461a      	mov	r2, r3
 80031a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80031a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80031aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031ac:	e841 2300 	strex	r3, r2, [r1]
 80031b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80031b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1e6      	bne.n	8003186 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e063      	b.n	8003294 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d149      	bne.n	800326e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031e2:	2200      	movs	r2, #0
 80031e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f857 	bl	800329c <UART_WaitOnFlagUntilTimeout>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d03c      	beq.n	800326e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fc:	e853 3f00 	ldrex	r3, [r3]
 8003200:	623b      	str	r3, [r7, #32]
   return(result);
 8003202:	6a3b      	ldr	r3, [r7, #32]
 8003204:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003208:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	461a      	mov	r2, r3
 8003210:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003212:	633b      	str	r3, [r7, #48]	@ 0x30
 8003214:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003216:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003218:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800321a:	e841 2300 	strex	r3, r2, [r1]
 800321e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1e6      	bne.n	80031f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	3308      	adds	r3, #8
 800322c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	e853 3f00 	ldrex	r3, [r3]
 8003234:	60fb      	str	r3, [r7, #12]
   return(result);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f023 0301 	bic.w	r3, r3, #1
 800323c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	3308      	adds	r3, #8
 8003244:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003246:	61fa      	str	r2, [r7, #28]
 8003248:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324a:	69b9      	ldr	r1, [r7, #24]
 800324c:	69fa      	ldr	r2, [r7, #28]
 800324e:	e841 2300 	strex	r3, r2, [r1]
 8003252:	617b      	str	r3, [r7, #20]
   return(result);
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1e5      	bne.n	8003226 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2220      	movs	r2, #32
 800325e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e012      	b.n	8003294 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2220      	movs	r2, #32
 8003272:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2220      	movs	r2, #32
 800327a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3758      	adds	r7, #88	@ 0x58
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	4613      	mov	r3, r2
 80032aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032ac:	e04f      	b.n	800334e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032b4:	d04b      	beq.n	800334e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b6:	f7fd fc51 	bl	8000b5c <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d302      	bcc.n	80032cc <UART_WaitOnFlagUntilTimeout+0x30>
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e04e      	b.n	800336e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d037      	beq.n	800334e <UART_WaitOnFlagUntilTimeout+0xb2>
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	2b80      	cmp	r3, #128	@ 0x80
 80032e2:	d034      	beq.n	800334e <UART_WaitOnFlagUntilTimeout+0xb2>
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2b40      	cmp	r3, #64	@ 0x40
 80032e8:	d031      	beq.n	800334e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	f003 0308 	and.w	r3, r3, #8
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d110      	bne.n	800331a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2208      	movs	r2, #8
 80032fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 f838 	bl	8003376 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2208      	movs	r2, #8
 800330a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e029      	b.n	800336e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003324:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003328:	d111      	bne.n	800334e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003332:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f000 f81e 	bl	8003376 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2220      	movs	r2, #32
 800333e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e00f      	b.n	800336e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	69da      	ldr	r2, [r3, #28]
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	4013      	ands	r3, r2
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	429a      	cmp	r2, r3
 800335c:	bf0c      	ite	eq
 800335e:	2301      	moveq	r3, #1
 8003360:	2300      	movne	r3, #0
 8003362:	b2db      	uxtb	r3, r3
 8003364:	461a      	mov	r2, r3
 8003366:	79fb      	ldrb	r3, [r7, #7]
 8003368:	429a      	cmp	r2, r3
 800336a:	d0a0      	beq.n	80032ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003376:	b480      	push	{r7}
 8003378:	b095      	sub	sp, #84	@ 0x54
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003386:	e853 3f00 	ldrex	r3, [r3]
 800338a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800338c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800338e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003392:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	461a      	mov	r2, r3
 800339a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800339c:	643b      	str	r3, [r7, #64]	@ 0x40
 800339e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80033a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80033a4:	e841 2300 	strex	r3, r2, [r1]
 80033a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80033aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1e6      	bne.n	800337e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	3308      	adds	r3, #8
 80033b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	e853 3f00 	ldrex	r3, [r3]
 80033be:	61fb      	str	r3, [r7, #28]
   return(result);
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033c6:	f023 0301 	bic.w	r3, r3, #1
 80033ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	3308      	adds	r3, #8
 80033d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033dc:	e841 2300 	strex	r3, r2, [r1]
 80033e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1e3      	bne.n	80033b0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d118      	bne.n	8003422 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	e853 3f00 	ldrex	r3, [r3]
 80033fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	f023 0310 	bic.w	r3, r3, #16
 8003404:	647b      	str	r3, [r7, #68]	@ 0x44
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	461a      	mov	r2, r3
 800340c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800340e:	61bb      	str	r3, [r7, #24]
 8003410:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003412:	6979      	ldr	r1, [r7, #20]
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	e841 2300 	strex	r3, r2, [r1]
 800341a:	613b      	str	r3, [r7, #16]
   return(result);
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1e6      	bne.n	80033f0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2220      	movs	r2, #32
 8003426:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003436:	bf00      	nop
 8003438:	3754      	adds	r7, #84	@ 0x54
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b084      	sub	sp, #16
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800344e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f7ff faf1 	bl	8002a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800345e:	bf00      	nop
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b088      	sub	sp, #32
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	e853 3f00 	ldrex	r3, [r3]
 800347a:	60bb      	str	r3, [r7, #8]
   return(result);
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003482:	61fb      	str	r3, [r7, #28]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	61bb      	str	r3, [r7, #24]
 800348e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003490:	6979      	ldr	r1, [r7, #20]
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	e841 2300 	strex	r3, r2, [r1]
 8003498:	613b      	str	r3, [r7, #16]
   return(result);
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1e6      	bne.n	800346e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7ff fabc 	bl	8002a2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034b4:	bf00      	nop
 80034b6:	3720      	adds	r7, #32
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003506:	2b01      	cmp	r3, #1
 8003508:	d101      	bne.n	800350e <HAL_UARTEx_DisableFifoMode+0x16>
 800350a:	2302      	movs	r3, #2
 800350c:	e027      	b.n	800355e <HAL_UARTEx_DisableFifoMode+0x66>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2224      	movs	r2, #36	@ 0x24
 800351a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0201 	bic.w	r2, r2, #1
 8003534:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800353c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2220      	movs	r2, #32
 8003550:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b084      	sub	sp, #16
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
 8003572:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800357a:	2b01      	cmp	r3, #1
 800357c:	d101      	bne.n	8003582 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800357e:	2302      	movs	r3, #2
 8003580:	e02d      	b.n	80035de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2224      	movs	r2, #36	@ 0x24
 800358e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0201 	bic.w	r2, r2, #1
 80035a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f850 	bl	8003664 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b084      	sub	sp, #16
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d101      	bne.n	80035fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80035fa:	2302      	movs	r3, #2
 80035fc:	e02d      	b.n	800365a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2224      	movs	r2, #36	@ 0x24
 800360a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 0201 	bic.w	r2, r2, #1
 8003624:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f812 	bl	8003664 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2220      	movs	r2, #32
 800364c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
	...

08003664 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003670:	2b00      	cmp	r3, #0
 8003672:	d108      	bne.n	8003686 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003684:	e031      	b.n	80036ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003686:	2308      	movs	r3, #8
 8003688:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800368a:	2308      	movs	r3, #8
 800368c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	0e5b      	lsrs	r3, r3, #25
 8003696:	b2db      	uxtb	r3, r3
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	0f5b      	lsrs	r3, r3, #29
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80036ae:	7bbb      	ldrb	r3, [r7, #14]
 80036b0:	7b3a      	ldrb	r2, [r7, #12]
 80036b2:	4911      	ldr	r1, [pc, #68]	@ (80036f8 <UARTEx_SetNbDataToProcess+0x94>)
 80036b4:	5c8a      	ldrb	r2, [r1, r2]
 80036b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80036ba:	7b3a      	ldrb	r2, [r7, #12]
 80036bc:	490f      	ldr	r1, [pc, #60]	@ (80036fc <UARTEx_SetNbDataToProcess+0x98>)
 80036be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80036c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
 80036ce:	7b7a      	ldrb	r2, [r7, #13]
 80036d0:	4909      	ldr	r1, [pc, #36]	@ (80036f8 <UARTEx_SetNbDataToProcess+0x94>)
 80036d2:	5c8a      	ldrb	r2, [r1, r2]
 80036d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80036d8:	7b7a      	ldrb	r2, [r7, #13]
 80036da:	4908      	ldr	r1, [pc, #32]	@ (80036fc <UARTEx_SetNbDataToProcess+0x98>)
 80036dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80036de:	fb93 f3f2 	sdiv	r3, r3, r2
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80036ea:	bf00      	nop
 80036ec:	3714      	adds	r7, #20
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	080040b4 	.word	0x080040b4
 80036fc:	080040bc 	.word	0x080040bc

08003700 <std>:
 8003700:	2300      	movs	r3, #0
 8003702:	b510      	push	{r4, lr}
 8003704:	4604      	mov	r4, r0
 8003706:	e9c0 3300 	strd	r3, r3, [r0]
 800370a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800370e:	6083      	str	r3, [r0, #8]
 8003710:	8181      	strh	r1, [r0, #12]
 8003712:	6643      	str	r3, [r0, #100]	@ 0x64
 8003714:	81c2      	strh	r2, [r0, #14]
 8003716:	6183      	str	r3, [r0, #24]
 8003718:	4619      	mov	r1, r3
 800371a:	2208      	movs	r2, #8
 800371c:	305c      	adds	r0, #92	@ 0x5c
 800371e:	f000 f9e7 	bl	8003af0 <memset>
 8003722:	4b0d      	ldr	r3, [pc, #52]	@ (8003758 <std+0x58>)
 8003724:	6263      	str	r3, [r4, #36]	@ 0x24
 8003726:	4b0d      	ldr	r3, [pc, #52]	@ (800375c <std+0x5c>)
 8003728:	62a3      	str	r3, [r4, #40]	@ 0x28
 800372a:	4b0d      	ldr	r3, [pc, #52]	@ (8003760 <std+0x60>)
 800372c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800372e:	4b0d      	ldr	r3, [pc, #52]	@ (8003764 <std+0x64>)
 8003730:	6323      	str	r3, [r4, #48]	@ 0x30
 8003732:	4b0d      	ldr	r3, [pc, #52]	@ (8003768 <std+0x68>)
 8003734:	6224      	str	r4, [r4, #32]
 8003736:	429c      	cmp	r4, r3
 8003738:	d006      	beq.n	8003748 <std+0x48>
 800373a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800373e:	4294      	cmp	r4, r2
 8003740:	d002      	beq.n	8003748 <std+0x48>
 8003742:	33d0      	adds	r3, #208	@ 0xd0
 8003744:	429c      	cmp	r4, r3
 8003746:	d105      	bne.n	8003754 <std+0x54>
 8003748:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800374c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003750:	f000 ba46 	b.w	8003be0 <__retarget_lock_init_recursive>
 8003754:	bd10      	pop	{r4, pc}
 8003756:	bf00      	nop
 8003758:	08003941 	.word	0x08003941
 800375c:	08003963 	.word	0x08003963
 8003760:	0800399b 	.word	0x0800399b
 8003764:	080039bf 	.word	0x080039bf
 8003768:	20000120 	.word	0x20000120

0800376c <stdio_exit_handler>:
 800376c:	4a02      	ldr	r2, [pc, #8]	@ (8003778 <stdio_exit_handler+0xc>)
 800376e:	4903      	ldr	r1, [pc, #12]	@ (800377c <stdio_exit_handler+0x10>)
 8003770:	4803      	ldr	r0, [pc, #12]	@ (8003780 <stdio_exit_handler+0x14>)
 8003772:	f000 b869 	b.w	8003848 <_fwalk_sglue>
 8003776:	bf00      	nop
 8003778:	2000000c 	.word	0x2000000c
 800377c:	08003ee1 	.word	0x08003ee1
 8003780:	2000001c 	.word	0x2000001c

08003784 <cleanup_stdio>:
 8003784:	6841      	ldr	r1, [r0, #4]
 8003786:	4b0c      	ldr	r3, [pc, #48]	@ (80037b8 <cleanup_stdio+0x34>)
 8003788:	4299      	cmp	r1, r3
 800378a:	b510      	push	{r4, lr}
 800378c:	4604      	mov	r4, r0
 800378e:	d001      	beq.n	8003794 <cleanup_stdio+0x10>
 8003790:	f000 fba6 	bl	8003ee0 <_fflush_r>
 8003794:	68a1      	ldr	r1, [r4, #8]
 8003796:	4b09      	ldr	r3, [pc, #36]	@ (80037bc <cleanup_stdio+0x38>)
 8003798:	4299      	cmp	r1, r3
 800379a:	d002      	beq.n	80037a2 <cleanup_stdio+0x1e>
 800379c:	4620      	mov	r0, r4
 800379e:	f000 fb9f 	bl	8003ee0 <_fflush_r>
 80037a2:	68e1      	ldr	r1, [r4, #12]
 80037a4:	4b06      	ldr	r3, [pc, #24]	@ (80037c0 <cleanup_stdio+0x3c>)
 80037a6:	4299      	cmp	r1, r3
 80037a8:	d004      	beq.n	80037b4 <cleanup_stdio+0x30>
 80037aa:	4620      	mov	r0, r4
 80037ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037b0:	f000 bb96 	b.w	8003ee0 <_fflush_r>
 80037b4:	bd10      	pop	{r4, pc}
 80037b6:	bf00      	nop
 80037b8:	20000120 	.word	0x20000120
 80037bc:	20000188 	.word	0x20000188
 80037c0:	200001f0 	.word	0x200001f0

080037c4 <global_stdio_init.part.0>:
 80037c4:	b510      	push	{r4, lr}
 80037c6:	4b0b      	ldr	r3, [pc, #44]	@ (80037f4 <global_stdio_init.part.0+0x30>)
 80037c8:	4c0b      	ldr	r4, [pc, #44]	@ (80037f8 <global_stdio_init.part.0+0x34>)
 80037ca:	4a0c      	ldr	r2, [pc, #48]	@ (80037fc <global_stdio_init.part.0+0x38>)
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	4620      	mov	r0, r4
 80037d0:	2200      	movs	r2, #0
 80037d2:	2104      	movs	r1, #4
 80037d4:	f7ff ff94 	bl	8003700 <std>
 80037d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80037dc:	2201      	movs	r2, #1
 80037de:	2109      	movs	r1, #9
 80037e0:	f7ff ff8e 	bl	8003700 <std>
 80037e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80037e8:	2202      	movs	r2, #2
 80037ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037ee:	2112      	movs	r1, #18
 80037f0:	f7ff bf86 	b.w	8003700 <std>
 80037f4:	20000258 	.word	0x20000258
 80037f8:	20000120 	.word	0x20000120
 80037fc:	0800376d 	.word	0x0800376d

08003800 <__sfp_lock_acquire>:
 8003800:	4801      	ldr	r0, [pc, #4]	@ (8003808 <__sfp_lock_acquire+0x8>)
 8003802:	f000 b9ee 	b.w	8003be2 <__retarget_lock_acquire_recursive>
 8003806:	bf00      	nop
 8003808:	20000261 	.word	0x20000261

0800380c <__sfp_lock_release>:
 800380c:	4801      	ldr	r0, [pc, #4]	@ (8003814 <__sfp_lock_release+0x8>)
 800380e:	f000 b9e9 	b.w	8003be4 <__retarget_lock_release_recursive>
 8003812:	bf00      	nop
 8003814:	20000261 	.word	0x20000261

08003818 <__sinit>:
 8003818:	b510      	push	{r4, lr}
 800381a:	4604      	mov	r4, r0
 800381c:	f7ff fff0 	bl	8003800 <__sfp_lock_acquire>
 8003820:	6a23      	ldr	r3, [r4, #32]
 8003822:	b11b      	cbz	r3, 800382c <__sinit+0x14>
 8003824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003828:	f7ff bff0 	b.w	800380c <__sfp_lock_release>
 800382c:	4b04      	ldr	r3, [pc, #16]	@ (8003840 <__sinit+0x28>)
 800382e:	6223      	str	r3, [r4, #32]
 8003830:	4b04      	ldr	r3, [pc, #16]	@ (8003844 <__sinit+0x2c>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1f5      	bne.n	8003824 <__sinit+0xc>
 8003838:	f7ff ffc4 	bl	80037c4 <global_stdio_init.part.0>
 800383c:	e7f2      	b.n	8003824 <__sinit+0xc>
 800383e:	bf00      	nop
 8003840:	08003785 	.word	0x08003785
 8003844:	20000258 	.word	0x20000258

08003848 <_fwalk_sglue>:
 8003848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800384c:	4607      	mov	r7, r0
 800384e:	4688      	mov	r8, r1
 8003850:	4614      	mov	r4, r2
 8003852:	2600      	movs	r6, #0
 8003854:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003858:	f1b9 0901 	subs.w	r9, r9, #1
 800385c:	d505      	bpl.n	800386a <_fwalk_sglue+0x22>
 800385e:	6824      	ldr	r4, [r4, #0]
 8003860:	2c00      	cmp	r4, #0
 8003862:	d1f7      	bne.n	8003854 <_fwalk_sglue+0xc>
 8003864:	4630      	mov	r0, r6
 8003866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800386a:	89ab      	ldrh	r3, [r5, #12]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d907      	bls.n	8003880 <_fwalk_sglue+0x38>
 8003870:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003874:	3301      	adds	r3, #1
 8003876:	d003      	beq.n	8003880 <_fwalk_sglue+0x38>
 8003878:	4629      	mov	r1, r5
 800387a:	4638      	mov	r0, r7
 800387c:	47c0      	blx	r8
 800387e:	4306      	orrs	r6, r0
 8003880:	3568      	adds	r5, #104	@ 0x68
 8003882:	e7e9      	b.n	8003858 <_fwalk_sglue+0x10>

08003884 <_puts_r>:
 8003884:	6a03      	ldr	r3, [r0, #32]
 8003886:	b570      	push	{r4, r5, r6, lr}
 8003888:	6884      	ldr	r4, [r0, #8]
 800388a:	4605      	mov	r5, r0
 800388c:	460e      	mov	r6, r1
 800388e:	b90b      	cbnz	r3, 8003894 <_puts_r+0x10>
 8003890:	f7ff ffc2 	bl	8003818 <__sinit>
 8003894:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003896:	07db      	lsls	r3, r3, #31
 8003898:	d405      	bmi.n	80038a6 <_puts_r+0x22>
 800389a:	89a3      	ldrh	r3, [r4, #12]
 800389c:	0598      	lsls	r0, r3, #22
 800389e:	d402      	bmi.n	80038a6 <_puts_r+0x22>
 80038a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038a2:	f000 f99e 	bl	8003be2 <__retarget_lock_acquire_recursive>
 80038a6:	89a3      	ldrh	r3, [r4, #12]
 80038a8:	0719      	lsls	r1, r3, #28
 80038aa:	d502      	bpl.n	80038b2 <_puts_r+0x2e>
 80038ac:	6923      	ldr	r3, [r4, #16]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d135      	bne.n	800391e <_puts_r+0x9a>
 80038b2:	4621      	mov	r1, r4
 80038b4:	4628      	mov	r0, r5
 80038b6:	f000 f8c5 	bl	8003a44 <__swsetup_r>
 80038ba:	b380      	cbz	r0, 800391e <_puts_r+0x9a>
 80038bc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80038c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80038c2:	07da      	lsls	r2, r3, #31
 80038c4:	d405      	bmi.n	80038d2 <_puts_r+0x4e>
 80038c6:	89a3      	ldrh	r3, [r4, #12]
 80038c8:	059b      	lsls	r3, r3, #22
 80038ca:	d402      	bmi.n	80038d2 <_puts_r+0x4e>
 80038cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038ce:	f000 f989 	bl	8003be4 <__retarget_lock_release_recursive>
 80038d2:	4628      	mov	r0, r5
 80038d4:	bd70      	pop	{r4, r5, r6, pc}
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	da04      	bge.n	80038e4 <_puts_r+0x60>
 80038da:	69a2      	ldr	r2, [r4, #24]
 80038dc:	429a      	cmp	r2, r3
 80038de:	dc17      	bgt.n	8003910 <_puts_r+0x8c>
 80038e0:	290a      	cmp	r1, #10
 80038e2:	d015      	beq.n	8003910 <_puts_r+0x8c>
 80038e4:	6823      	ldr	r3, [r4, #0]
 80038e6:	1c5a      	adds	r2, r3, #1
 80038e8:	6022      	str	r2, [r4, #0]
 80038ea:	7019      	strb	r1, [r3, #0]
 80038ec:	68a3      	ldr	r3, [r4, #8]
 80038ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80038f2:	3b01      	subs	r3, #1
 80038f4:	60a3      	str	r3, [r4, #8]
 80038f6:	2900      	cmp	r1, #0
 80038f8:	d1ed      	bne.n	80038d6 <_puts_r+0x52>
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	da11      	bge.n	8003922 <_puts_r+0x9e>
 80038fe:	4622      	mov	r2, r4
 8003900:	210a      	movs	r1, #10
 8003902:	4628      	mov	r0, r5
 8003904:	f000 f85f 	bl	80039c6 <__swbuf_r>
 8003908:	3001      	adds	r0, #1
 800390a:	d0d7      	beq.n	80038bc <_puts_r+0x38>
 800390c:	250a      	movs	r5, #10
 800390e:	e7d7      	b.n	80038c0 <_puts_r+0x3c>
 8003910:	4622      	mov	r2, r4
 8003912:	4628      	mov	r0, r5
 8003914:	f000 f857 	bl	80039c6 <__swbuf_r>
 8003918:	3001      	adds	r0, #1
 800391a:	d1e7      	bne.n	80038ec <_puts_r+0x68>
 800391c:	e7ce      	b.n	80038bc <_puts_r+0x38>
 800391e:	3e01      	subs	r6, #1
 8003920:	e7e4      	b.n	80038ec <_puts_r+0x68>
 8003922:	6823      	ldr	r3, [r4, #0]
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	6022      	str	r2, [r4, #0]
 8003928:	220a      	movs	r2, #10
 800392a:	701a      	strb	r2, [r3, #0]
 800392c:	e7ee      	b.n	800390c <_puts_r+0x88>
	...

08003930 <puts>:
 8003930:	4b02      	ldr	r3, [pc, #8]	@ (800393c <puts+0xc>)
 8003932:	4601      	mov	r1, r0
 8003934:	6818      	ldr	r0, [r3, #0]
 8003936:	f7ff bfa5 	b.w	8003884 <_puts_r>
 800393a:	bf00      	nop
 800393c:	20000018 	.word	0x20000018

08003940 <__sread>:
 8003940:	b510      	push	{r4, lr}
 8003942:	460c      	mov	r4, r1
 8003944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003948:	f000 f8fc 	bl	8003b44 <_read_r>
 800394c:	2800      	cmp	r0, #0
 800394e:	bfab      	itete	ge
 8003950:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003952:	89a3      	ldrhlt	r3, [r4, #12]
 8003954:	181b      	addge	r3, r3, r0
 8003956:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800395a:	bfac      	ite	ge
 800395c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800395e:	81a3      	strhlt	r3, [r4, #12]
 8003960:	bd10      	pop	{r4, pc}

08003962 <__swrite>:
 8003962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003966:	461f      	mov	r7, r3
 8003968:	898b      	ldrh	r3, [r1, #12]
 800396a:	05db      	lsls	r3, r3, #23
 800396c:	4605      	mov	r5, r0
 800396e:	460c      	mov	r4, r1
 8003970:	4616      	mov	r6, r2
 8003972:	d505      	bpl.n	8003980 <__swrite+0x1e>
 8003974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003978:	2302      	movs	r3, #2
 800397a:	2200      	movs	r2, #0
 800397c:	f000 f8d0 	bl	8003b20 <_lseek_r>
 8003980:	89a3      	ldrh	r3, [r4, #12]
 8003982:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003986:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800398a:	81a3      	strh	r3, [r4, #12]
 800398c:	4632      	mov	r2, r6
 800398e:	463b      	mov	r3, r7
 8003990:	4628      	mov	r0, r5
 8003992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003996:	f000 b8e7 	b.w	8003b68 <_write_r>

0800399a <__sseek>:
 800399a:	b510      	push	{r4, lr}
 800399c:	460c      	mov	r4, r1
 800399e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039a2:	f000 f8bd 	bl	8003b20 <_lseek_r>
 80039a6:	1c43      	adds	r3, r0, #1
 80039a8:	89a3      	ldrh	r3, [r4, #12]
 80039aa:	bf15      	itete	ne
 80039ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80039ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80039b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80039b6:	81a3      	strheq	r3, [r4, #12]
 80039b8:	bf18      	it	ne
 80039ba:	81a3      	strhne	r3, [r4, #12]
 80039bc:	bd10      	pop	{r4, pc}

080039be <__sclose>:
 80039be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039c2:	f000 b89d 	b.w	8003b00 <_close_r>

080039c6 <__swbuf_r>:
 80039c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c8:	460e      	mov	r6, r1
 80039ca:	4614      	mov	r4, r2
 80039cc:	4605      	mov	r5, r0
 80039ce:	b118      	cbz	r0, 80039d8 <__swbuf_r+0x12>
 80039d0:	6a03      	ldr	r3, [r0, #32]
 80039d2:	b90b      	cbnz	r3, 80039d8 <__swbuf_r+0x12>
 80039d4:	f7ff ff20 	bl	8003818 <__sinit>
 80039d8:	69a3      	ldr	r3, [r4, #24]
 80039da:	60a3      	str	r3, [r4, #8]
 80039dc:	89a3      	ldrh	r3, [r4, #12]
 80039de:	071a      	lsls	r2, r3, #28
 80039e0:	d501      	bpl.n	80039e6 <__swbuf_r+0x20>
 80039e2:	6923      	ldr	r3, [r4, #16]
 80039e4:	b943      	cbnz	r3, 80039f8 <__swbuf_r+0x32>
 80039e6:	4621      	mov	r1, r4
 80039e8:	4628      	mov	r0, r5
 80039ea:	f000 f82b 	bl	8003a44 <__swsetup_r>
 80039ee:	b118      	cbz	r0, 80039f8 <__swbuf_r+0x32>
 80039f0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80039f4:	4638      	mov	r0, r7
 80039f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039f8:	6823      	ldr	r3, [r4, #0]
 80039fa:	6922      	ldr	r2, [r4, #16]
 80039fc:	1a98      	subs	r0, r3, r2
 80039fe:	6963      	ldr	r3, [r4, #20]
 8003a00:	b2f6      	uxtb	r6, r6
 8003a02:	4283      	cmp	r3, r0
 8003a04:	4637      	mov	r7, r6
 8003a06:	dc05      	bgt.n	8003a14 <__swbuf_r+0x4e>
 8003a08:	4621      	mov	r1, r4
 8003a0a:	4628      	mov	r0, r5
 8003a0c:	f000 fa68 	bl	8003ee0 <_fflush_r>
 8003a10:	2800      	cmp	r0, #0
 8003a12:	d1ed      	bne.n	80039f0 <__swbuf_r+0x2a>
 8003a14:	68a3      	ldr	r3, [r4, #8]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	60a3      	str	r3, [r4, #8]
 8003a1a:	6823      	ldr	r3, [r4, #0]
 8003a1c:	1c5a      	adds	r2, r3, #1
 8003a1e:	6022      	str	r2, [r4, #0]
 8003a20:	701e      	strb	r6, [r3, #0]
 8003a22:	6962      	ldr	r2, [r4, #20]
 8003a24:	1c43      	adds	r3, r0, #1
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d004      	beq.n	8003a34 <__swbuf_r+0x6e>
 8003a2a:	89a3      	ldrh	r3, [r4, #12]
 8003a2c:	07db      	lsls	r3, r3, #31
 8003a2e:	d5e1      	bpl.n	80039f4 <__swbuf_r+0x2e>
 8003a30:	2e0a      	cmp	r6, #10
 8003a32:	d1df      	bne.n	80039f4 <__swbuf_r+0x2e>
 8003a34:	4621      	mov	r1, r4
 8003a36:	4628      	mov	r0, r5
 8003a38:	f000 fa52 	bl	8003ee0 <_fflush_r>
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	d0d9      	beq.n	80039f4 <__swbuf_r+0x2e>
 8003a40:	e7d6      	b.n	80039f0 <__swbuf_r+0x2a>
	...

08003a44 <__swsetup_r>:
 8003a44:	b538      	push	{r3, r4, r5, lr}
 8003a46:	4b29      	ldr	r3, [pc, #164]	@ (8003aec <__swsetup_r+0xa8>)
 8003a48:	4605      	mov	r5, r0
 8003a4a:	6818      	ldr	r0, [r3, #0]
 8003a4c:	460c      	mov	r4, r1
 8003a4e:	b118      	cbz	r0, 8003a58 <__swsetup_r+0x14>
 8003a50:	6a03      	ldr	r3, [r0, #32]
 8003a52:	b90b      	cbnz	r3, 8003a58 <__swsetup_r+0x14>
 8003a54:	f7ff fee0 	bl	8003818 <__sinit>
 8003a58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a5c:	0719      	lsls	r1, r3, #28
 8003a5e:	d422      	bmi.n	8003aa6 <__swsetup_r+0x62>
 8003a60:	06da      	lsls	r2, r3, #27
 8003a62:	d407      	bmi.n	8003a74 <__swsetup_r+0x30>
 8003a64:	2209      	movs	r2, #9
 8003a66:	602a      	str	r2, [r5, #0]
 8003a68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a6c:	81a3      	strh	r3, [r4, #12]
 8003a6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a72:	e033      	b.n	8003adc <__swsetup_r+0x98>
 8003a74:	0758      	lsls	r0, r3, #29
 8003a76:	d512      	bpl.n	8003a9e <__swsetup_r+0x5a>
 8003a78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a7a:	b141      	cbz	r1, 8003a8e <__swsetup_r+0x4a>
 8003a7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a80:	4299      	cmp	r1, r3
 8003a82:	d002      	beq.n	8003a8a <__swsetup_r+0x46>
 8003a84:	4628      	mov	r0, r5
 8003a86:	f000 f8af 	bl	8003be8 <_free_r>
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a8e:	89a3      	ldrh	r3, [r4, #12]
 8003a90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003a94:	81a3      	strh	r3, [r4, #12]
 8003a96:	2300      	movs	r3, #0
 8003a98:	6063      	str	r3, [r4, #4]
 8003a9a:	6923      	ldr	r3, [r4, #16]
 8003a9c:	6023      	str	r3, [r4, #0]
 8003a9e:	89a3      	ldrh	r3, [r4, #12]
 8003aa0:	f043 0308 	orr.w	r3, r3, #8
 8003aa4:	81a3      	strh	r3, [r4, #12]
 8003aa6:	6923      	ldr	r3, [r4, #16]
 8003aa8:	b94b      	cbnz	r3, 8003abe <__swsetup_r+0x7a>
 8003aaa:	89a3      	ldrh	r3, [r4, #12]
 8003aac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003ab0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ab4:	d003      	beq.n	8003abe <__swsetup_r+0x7a>
 8003ab6:	4621      	mov	r1, r4
 8003ab8:	4628      	mov	r0, r5
 8003aba:	f000 fa5f 	bl	8003f7c <__smakebuf_r>
 8003abe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ac2:	f013 0201 	ands.w	r2, r3, #1
 8003ac6:	d00a      	beq.n	8003ade <__swsetup_r+0x9a>
 8003ac8:	2200      	movs	r2, #0
 8003aca:	60a2      	str	r2, [r4, #8]
 8003acc:	6962      	ldr	r2, [r4, #20]
 8003ace:	4252      	negs	r2, r2
 8003ad0:	61a2      	str	r2, [r4, #24]
 8003ad2:	6922      	ldr	r2, [r4, #16]
 8003ad4:	b942      	cbnz	r2, 8003ae8 <__swsetup_r+0xa4>
 8003ad6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003ada:	d1c5      	bne.n	8003a68 <__swsetup_r+0x24>
 8003adc:	bd38      	pop	{r3, r4, r5, pc}
 8003ade:	0799      	lsls	r1, r3, #30
 8003ae0:	bf58      	it	pl
 8003ae2:	6962      	ldrpl	r2, [r4, #20]
 8003ae4:	60a2      	str	r2, [r4, #8]
 8003ae6:	e7f4      	b.n	8003ad2 <__swsetup_r+0x8e>
 8003ae8:	2000      	movs	r0, #0
 8003aea:	e7f7      	b.n	8003adc <__swsetup_r+0x98>
 8003aec:	20000018 	.word	0x20000018

08003af0 <memset>:
 8003af0:	4402      	add	r2, r0
 8003af2:	4603      	mov	r3, r0
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d100      	bne.n	8003afa <memset+0xa>
 8003af8:	4770      	bx	lr
 8003afa:	f803 1b01 	strb.w	r1, [r3], #1
 8003afe:	e7f9      	b.n	8003af4 <memset+0x4>

08003b00 <_close_r>:
 8003b00:	b538      	push	{r3, r4, r5, lr}
 8003b02:	4d06      	ldr	r5, [pc, #24]	@ (8003b1c <_close_r+0x1c>)
 8003b04:	2300      	movs	r3, #0
 8003b06:	4604      	mov	r4, r0
 8003b08:	4608      	mov	r0, r1
 8003b0a:	602b      	str	r3, [r5, #0]
 8003b0c:	f7fc fe6f 	bl	80007ee <_close>
 8003b10:	1c43      	adds	r3, r0, #1
 8003b12:	d102      	bne.n	8003b1a <_close_r+0x1a>
 8003b14:	682b      	ldr	r3, [r5, #0]
 8003b16:	b103      	cbz	r3, 8003b1a <_close_r+0x1a>
 8003b18:	6023      	str	r3, [r4, #0]
 8003b1a:	bd38      	pop	{r3, r4, r5, pc}
 8003b1c:	2000025c 	.word	0x2000025c

08003b20 <_lseek_r>:
 8003b20:	b538      	push	{r3, r4, r5, lr}
 8003b22:	4d07      	ldr	r5, [pc, #28]	@ (8003b40 <_lseek_r+0x20>)
 8003b24:	4604      	mov	r4, r0
 8003b26:	4608      	mov	r0, r1
 8003b28:	4611      	mov	r1, r2
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	602a      	str	r2, [r5, #0]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	f7fc fe84 	bl	800083c <_lseek>
 8003b34:	1c43      	adds	r3, r0, #1
 8003b36:	d102      	bne.n	8003b3e <_lseek_r+0x1e>
 8003b38:	682b      	ldr	r3, [r5, #0]
 8003b3a:	b103      	cbz	r3, 8003b3e <_lseek_r+0x1e>
 8003b3c:	6023      	str	r3, [r4, #0]
 8003b3e:	bd38      	pop	{r3, r4, r5, pc}
 8003b40:	2000025c 	.word	0x2000025c

08003b44 <_read_r>:
 8003b44:	b538      	push	{r3, r4, r5, lr}
 8003b46:	4d07      	ldr	r5, [pc, #28]	@ (8003b64 <_read_r+0x20>)
 8003b48:	4604      	mov	r4, r0
 8003b4a:	4608      	mov	r0, r1
 8003b4c:	4611      	mov	r1, r2
 8003b4e:	2200      	movs	r2, #0
 8003b50:	602a      	str	r2, [r5, #0]
 8003b52:	461a      	mov	r2, r3
 8003b54:	f7fc fe12 	bl	800077c <_read>
 8003b58:	1c43      	adds	r3, r0, #1
 8003b5a:	d102      	bne.n	8003b62 <_read_r+0x1e>
 8003b5c:	682b      	ldr	r3, [r5, #0]
 8003b5e:	b103      	cbz	r3, 8003b62 <_read_r+0x1e>
 8003b60:	6023      	str	r3, [r4, #0]
 8003b62:	bd38      	pop	{r3, r4, r5, pc}
 8003b64:	2000025c 	.word	0x2000025c

08003b68 <_write_r>:
 8003b68:	b538      	push	{r3, r4, r5, lr}
 8003b6a:	4d07      	ldr	r5, [pc, #28]	@ (8003b88 <_write_r+0x20>)
 8003b6c:	4604      	mov	r4, r0
 8003b6e:	4608      	mov	r0, r1
 8003b70:	4611      	mov	r1, r2
 8003b72:	2200      	movs	r2, #0
 8003b74:	602a      	str	r2, [r5, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	f7fc fe1d 	bl	80007b6 <_write>
 8003b7c:	1c43      	adds	r3, r0, #1
 8003b7e:	d102      	bne.n	8003b86 <_write_r+0x1e>
 8003b80:	682b      	ldr	r3, [r5, #0]
 8003b82:	b103      	cbz	r3, 8003b86 <_write_r+0x1e>
 8003b84:	6023      	str	r3, [r4, #0]
 8003b86:	bd38      	pop	{r3, r4, r5, pc}
 8003b88:	2000025c 	.word	0x2000025c

08003b8c <__errno>:
 8003b8c:	4b01      	ldr	r3, [pc, #4]	@ (8003b94 <__errno+0x8>)
 8003b8e:	6818      	ldr	r0, [r3, #0]
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	20000018 	.word	0x20000018

08003b98 <__libc_init_array>:
 8003b98:	b570      	push	{r4, r5, r6, lr}
 8003b9a:	4d0d      	ldr	r5, [pc, #52]	@ (8003bd0 <__libc_init_array+0x38>)
 8003b9c:	4c0d      	ldr	r4, [pc, #52]	@ (8003bd4 <__libc_init_array+0x3c>)
 8003b9e:	1b64      	subs	r4, r4, r5
 8003ba0:	10a4      	asrs	r4, r4, #2
 8003ba2:	2600      	movs	r6, #0
 8003ba4:	42a6      	cmp	r6, r4
 8003ba6:	d109      	bne.n	8003bbc <__libc_init_array+0x24>
 8003ba8:	4d0b      	ldr	r5, [pc, #44]	@ (8003bd8 <__libc_init_array+0x40>)
 8003baa:	4c0c      	ldr	r4, [pc, #48]	@ (8003bdc <__libc_init_array+0x44>)
 8003bac:	f000 fa54 	bl	8004058 <_init>
 8003bb0:	1b64      	subs	r4, r4, r5
 8003bb2:	10a4      	asrs	r4, r4, #2
 8003bb4:	2600      	movs	r6, #0
 8003bb6:	42a6      	cmp	r6, r4
 8003bb8:	d105      	bne.n	8003bc6 <__libc_init_array+0x2e>
 8003bba:	bd70      	pop	{r4, r5, r6, pc}
 8003bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bc0:	4798      	blx	r3
 8003bc2:	3601      	adds	r6, #1
 8003bc4:	e7ee      	b.n	8003ba4 <__libc_init_array+0xc>
 8003bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bca:	4798      	blx	r3
 8003bcc:	3601      	adds	r6, #1
 8003bce:	e7f2      	b.n	8003bb6 <__libc_init_array+0x1e>
 8003bd0:	080040cc 	.word	0x080040cc
 8003bd4:	080040cc 	.word	0x080040cc
 8003bd8:	080040cc 	.word	0x080040cc
 8003bdc:	080040d0 	.word	0x080040d0

08003be0 <__retarget_lock_init_recursive>:
 8003be0:	4770      	bx	lr

08003be2 <__retarget_lock_acquire_recursive>:
 8003be2:	4770      	bx	lr

08003be4 <__retarget_lock_release_recursive>:
 8003be4:	4770      	bx	lr
	...

08003be8 <_free_r>:
 8003be8:	b538      	push	{r3, r4, r5, lr}
 8003bea:	4605      	mov	r5, r0
 8003bec:	2900      	cmp	r1, #0
 8003bee:	d041      	beq.n	8003c74 <_free_r+0x8c>
 8003bf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bf4:	1f0c      	subs	r4, r1, #4
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	bfb8      	it	lt
 8003bfa:	18e4      	addlt	r4, r4, r3
 8003bfc:	f000 f8e0 	bl	8003dc0 <__malloc_lock>
 8003c00:	4a1d      	ldr	r2, [pc, #116]	@ (8003c78 <_free_r+0x90>)
 8003c02:	6813      	ldr	r3, [r2, #0]
 8003c04:	b933      	cbnz	r3, 8003c14 <_free_r+0x2c>
 8003c06:	6063      	str	r3, [r4, #4]
 8003c08:	6014      	str	r4, [r2, #0]
 8003c0a:	4628      	mov	r0, r5
 8003c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c10:	f000 b8dc 	b.w	8003dcc <__malloc_unlock>
 8003c14:	42a3      	cmp	r3, r4
 8003c16:	d908      	bls.n	8003c2a <_free_r+0x42>
 8003c18:	6820      	ldr	r0, [r4, #0]
 8003c1a:	1821      	adds	r1, r4, r0
 8003c1c:	428b      	cmp	r3, r1
 8003c1e:	bf01      	itttt	eq
 8003c20:	6819      	ldreq	r1, [r3, #0]
 8003c22:	685b      	ldreq	r3, [r3, #4]
 8003c24:	1809      	addeq	r1, r1, r0
 8003c26:	6021      	streq	r1, [r4, #0]
 8003c28:	e7ed      	b.n	8003c06 <_free_r+0x1e>
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	b10b      	cbz	r3, 8003c34 <_free_r+0x4c>
 8003c30:	42a3      	cmp	r3, r4
 8003c32:	d9fa      	bls.n	8003c2a <_free_r+0x42>
 8003c34:	6811      	ldr	r1, [r2, #0]
 8003c36:	1850      	adds	r0, r2, r1
 8003c38:	42a0      	cmp	r0, r4
 8003c3a:	d10b      	bne.n	8003c54 <_free_r+0x6c>
 8003c3c:	6820      	ldr	r0, [r4, #0]
 8003c3e:	4401      	add	r1, r0
 8003c40:	1850      	adds	r0, r2, r1
 8003c42:	4283      	cmp	r3, r0
 8003c44:	6011      	str	r1, [r2, #0]
 8003c46:	d1e0      	bne.n	8003c0a <_free_r+0x22>
 8003c48:	6818      	ldr	r0, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	6053      	str	r3, [r2, #4]
 8003c4e:	4408      	add	r0, r1
 8003c50:	6010      	str	r0, [r2, #0]
 8003c52:	e7da      	b.n	8003c0a <_free_r+0x22>
 8003c54:	d902      	bls.n	8003c5c <_free_r+0x74>
 8003c56:	230c      	movs	r3, #12
 8003c58:	602b      	str	r3, [r5, #0]
 8003c5a:	e7d6      	b.n	8003c0a <_free_r+0x22>
 8003c5c:	6820      	ldr	r0, [r4, #0]
 8003c5e:	1821      	adds	r1, r4, r0
 8003c60:	428b      	cmp	r3, r1
 8003c62:	bf04      	itt	eq
 8003c64:	6819      	ldreq	r1, [r3, #0]
 8003c66:	685b      	ldreq	r3, [r3, #4]
 8003c68:	6063      	str	r3, [r4, #4]
 8003c6a:	bf04      	itt	eq
 8003c6c:	1809      	addeq	r1, r1, r0
 8003c6e:	6021      	streq	r1, [r4, #0]
 8003c70:	6054      	str	r4, [r2, #4]
 8003c72:	e7ca      	b.n	8003c0a <_free_r+0x22>
 8003c74:	bd38      	pop	{r3, r4, r5, pc}
 8003c76:	bf00      	nop
 8003c78:	20000268 	.word	0x20000268

08003c7c <sbrk_aligned>:
 8003c7c:	b570      	push	{r4, r5, r6, lr}
 8003c7e:	4e0f      	ldr	r6, [pc, #60]	@ (8003cbc <sbrk_aligned+0x40>)
 8003c80:	460c      	mov	r4, r1
 8003c82:	6831      	ldr	r1, [r6, #0]
 8003c84:	4605      	mov	r5, r0
 8003c86:	b911      	cbnz	r1, 8003c8e <sbrk_aligned+0x12>
 8003c88:	f000 f9d6 	bl	8004038 <_sbrk_r>
 8003c8c:	6030      	str	r0, [r6, #0]
 8003c8e:	4621      	mov	r1, r4
 8003c90:	4628      	mov	r0, r5
 8003c92:	f000 f9d1 	bl	8004038 <_sbrk_r>
 8003c96:	1c43      	adds	r3, r0, #1
 8003c98:	d103      	bne.n	8003ca2 <sbrk_aligned+0x26>
 8003c9a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003c9e:	4620      	mov	r0, r4
 8003ca0:	bd70      	pop	{r4, r5, r6, pc}
 8003ca2:	1cc4      	adds	r4, r0, #3
 8003ca4:	f024 0403 	bic.w	r4, r4, #3
 8003ca8:	42a0      	cmp	r0, r4
 8003caa:	d0f8      	beq.n	8003c9e <sbrk_aligned+0x22>
 8003cac:	1a21      	subs	r1, r4, r0
 8003cae:	4628      	mov	r0, r5
 8003cb0:	f000 f9c2 	bl	8004038 <_sbrk_r>
 8003cb4:	3001      	adds	r0, #1
 8003cb6:	d1f2      	bne.n	8003c9e <sbrk_aligned+0x22>
 8003cb8:	e7ef      	b.n	8003c9a <sbrk_aligned+0x1e>
 8003cba:	bf00      	nop
 8003cbc:	20000264 	.word	0x20000264

08003cc0 <_malloc_r>:
 8003cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cc4:	1ccd      	adds	r5, r1, #3
 8003cc6:	f025 0503 	bic.w	r5, r5, #3
 8003cca:	3508      	adds	r5, #8
 8003ccc:	2d0c      	cmp	r5, #12
 8003cce:	bf38      	it	cc
 8003cd0:	250c      	movcc	r5, #12
 8003cd2:	2d00      	cmp	r5, #0
 8003cd4:	4606      	mov	r6, r0
 8003cd6:	db01      	blt.n	8003cdc <_malloc_r+0x1c>
 8003cd8:	42a9      	cmp	r1, r5
 8003cda:	d904      	bls.n	8003ce6 <_malloc_r+0x26>
 8003cdc:	230c      	movs	r3, #12
 8003cde:	6033      	str	r3, [r6, #0]
 8003ce0:	2000      	movs	r0, #0
 8003ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ce6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003dbc <_malloc_r+0xfc>
 8003cea:	f000 f869 	bl	8003dc0 <__malloc_lock>
 8003cee:	f8d8 3000 	ldr.w	r3, [r8]
 8003cf2:	461c      	mov	r4, r3
 8003cf4:	bb44      	cbnz	r4, 8003d48 <_malloc_r+0x88>
 8003cf6:	4629      	mov	r1, r5
 8003cf8:	4630      	mov	r0, r6
 8003cfa:	f7ff ffbf 	bl	8003c7c <sbrk_aligned>
 8003cfe:	1c43      	adds	r3, r0, #1
 8003d00:	4604      	mov	r4, r0
 8003d02:	d158      	bne.n	8003db6 <_malloc_r+0xf6>
 8003d04:	f8d8 4000 	ldr.w	r4, [r8]
 8003d08:	4627      	mov	r7, r4
 8003d0a:	2f00      	cmp	r7, #0
 8003d0c:	d143      	bne.n	8003d96 <_malloc_r+0xd6>
 8003d0e:	2c00      	cmp	r4, #0
 8003d10:	d04b      	beq.n	8003daa <_malloc_r+0xea>
 8003d12:	6823      	ldr	r3, [r4, #0]
 8003d14:	4639      	mov	r1, r7
 8003d16:	4630      	mov	r0, r6
 8003d18:	eb04 0903 	add.w	r9, r4, r3
 8003d1c:	f000 f98c 	bl	8004038 <_sbrk_r>
 8003d20:	4581      	cmp	r9, r0
 8003d22:	d142      	bne.n	8003daa <_malloc_r+0xea>
 8003d24:	6821      	ldr	r1, [r4, #0]
 8003d26:	1a6d      	subs	r5, r5, r1
 8003d28:	4629      	mov	r1, r5
 8003d2a:	4630      	mov	r0, r6
 8003d2c:	f7ff ffa6 	bl	8003c7c <sbrk_aligned>
 8003d30:	3001      	adds	r0, #1
 8003d32:	d03a      	beq.n	8003daa <_malloc_r+0xea>
 8003d34:	6823      	ldr	r3, [r4, #0]
 8003d36:	442b      	add	r3, r5
 8003d38:	6023      	str	r3, [r4, #0]
 8003d3a:	f8d8 3000 	ldr.w	r3, [r8]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	bb62      	cbnz	r2, 8003d9c <_malloc_r+0xdc>
 8003d42:	f8c8 7000 	str.w	r7, [r8]
 8003d46:	e00f      	b.n	8003d68 <_malloc_r+0xa8>
 8003d48:	6822      	ldr	r2, [r4, #0]
 8003d4a:	1b52      	subs	r2, r2, r5
 8003d4c:	d420      	bmi.n	8003d90 <_malloc_r+0xd0>
 8003d4e:	2a0b      	cmp	r2, #11
 8003d50:	d917      	bls.n	8003d82 <_malloc_r+0xc2>
 8003d52:	1961      	adds	r1, r4, r5
 8003d54:	42a3      	cmp	r3, r4
 8003d56:	6025      	str	r5, [r4, #0]
 8003d58:	bf18      	it	ne
 8003d5a:	6059      	strne	r1, [r3, #4]
 8003d5c:	6863      	ldr	r3, [r4, #4]
 8003d5e:	bf08      	it	eq
 8003d60:	f8c8 1000 	streq.w	r1, [r8]
 8003d64:	5162      	str	r2, [r4, r5]
 8003d66:	604b      	str	r3, [r1, #4]
 8003d68:	4630      	mov	r0, r6
 8003d6a:	f000 f82f 	bl	8003dcc <__malloc_unlock>
 8003d6e:	f104 000b 	add.w	r0, r4, #11
 8003d72:	1d23      	adds	r3, r4, #4
 8003d74:	f020 0007 	bic.w	r0, r0, #7
 8003d78:	1ac2      	subs	r2, r0, r3
 8003d7a:	bf1c      	itt	ne
 8003d7c:	1a1b      	subne	r3, r3, r0
 8003d7e:	50a3      	strne	r3, [r4, r2]
 8003d80:	e7af      	b.n	8003ce2 <_malloc_r+0x22>
 8003d82:	6862      	ldr	r2, [r4, #4]
 8003d84:	42a3      	cmp	r3, r4
 8003d86:	bf0c      	ite	eq
 8003d88:	f8c8 2000 	streq.w	r2, [r8]
 8003d8c:	605a      	strne	r2, [r3, #4]
 8003d8e:	e7eb      	b.n	8003d68 <_malloc_r+0xa8>
 8003d90:	4623      	mov	r3, r4
 8003d92:	6864      	ldr	r4, [r4, #4]
 8003d94:	e7ae      	b.n	8003cf4 <_malloc_r+0x34>
 8003d96:	463c      	mov	r4, r7
 8003d98:	687f      	ldr	r7, [r7, #4]
 8003d9a:	e7b6      	b.n	8003d0a <_malloc_r+0x4a>
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	42a3      	cmp	r3, r4
 8003da2:	d1fb      	bne.n	8003d9c <_malloc_r+0xdc>
 8003da4:	2300      	movs	r3, #0
 8003da6:	6053      	str	r3, [r2, #4]
 8003da8:	e7de      	b.n	8003d68 <_malloc_r+0xa8>
 8003daa:	230c      	movs	r3, #12
 8003dac:	6033      	str	r3, [r6, #0]
 8003dae:	4630      	mov	r0, r6
 8003db0:	f000 f80c 	bl	8003dcc <__malloc_unlock>
 8003db4:	e794      	b.n	8003ce0 <_malloc_r+0x20>
 8003db6:	6005      	str	r5, [r0, #0]
 8003db8:	e7d6      	b.n	8003d68 <_malloc_r+0xa8>
 8003dba:	bf00      	nop
 8003dbc:	20000268 	.word	0x20000268

08003dc0 <__malloc_lock>:
 8003dc0:	4801      	ldr	r0, [pc, #4]	@ (8003dc8 <__malloc_lock+0x8>)
 8003dc2:	f7ff bf0e 	b.w	8003be2 <__retarget_lock_acquire_recursive>
 8003dc6:	bf00      	nop
 8003dc8:	20000260 	.word	0x20000260

08003dcc <__malloc_unlock>:
 8003dcc:	4801      	ldr	r0, [pc, #4]	@ (8003dd4 <__malloc_unlock+0x8>)
 8003dce:	f7ff bf09 	b.w	8003be4 <__retarget_lock_release_recursive>
 8003dd2:	bf00      	nop
 8003dd4:	20000260 	.word	0x20000260

08003dd8 <__sflush_r>:
 8003dd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003de0:	0716      	lsls	r6, r2, #28
 8003de2:	4605      	mov	r5, r0
 8003de4:	460c      	mov	r4, r1
 8003de6:	d454      	bmi.n	8003e92 <__sflush_r+0xba>
 8003de8:	684b      	ldr	r3, [r1, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	dc02      	bgt.n	8003df4 <__sflush_r+0x1c>
 8003dee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	dd48      	ble.n	8003e86 <__sflush_r+0xae>
 8003df4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003df6:	2e00      	cmp	r6, #0
 8003df8:	d045      	beq.n	8003e86 <__sflush_r+0xae>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003e00:	682f      	ldr	r7, [r5, #0]
 8003e02:	6a21      	ldr	r1, [r4, #32]
 8003e04:	602b      	str	r3, [r5, #0]
 8003e06:	d030      	beq.n	8003e6a <__sflush_r+0x92>
 8003e08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003e0a:	89a3      	ldrh	r3, [r4, #12]
 8003e0c:	0759      	lsls	r1, r3, #29
 8003e0e:	d505      	bpl.n	8003e1c <__sflush_r+0x44>
 8003e10:	6863      	ldr	r3, [r4, #4]
 8003e12:	1ad2      	subs	r2, r2, r3
 8003e14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003e16:	b10b      	cbz	r3, 8003e1c <__sflush_r+0x44>
 8003e18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003e1a:	1ad2      	subs	r2, r2, r3
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003e20:	6a21      	ldr	r1, [r4, #32]
 8003e22:	4628      	mov	r0, r5
 8003e24:	47b0      	blx	r6
 8003e26:	1c43      	adds	r3, r0, #1
 8003e28:	89a3      	ldrh	r3, [r4, #12]
 8003e2a:	d106      	bne.n	8003e3a <__sflush_r+0x62>
 8003e2c:	6829      	ldr	r1, [r5, #0]
 8003e2e:	291d      	cmp	r1, #29
 8003e30:	d82b      	bhi.n	8003e8a <__sflush_r+0xb2>
 8003e32:	4a2a      	ldr	r2, [pc, #168]	@ (8003edc <__sflush_r+0x104>)
 8003e34:	410a      	asrs	r2, r1
 8003e36:	07d6      	lsls	r6, r2, #31
 8003e38:	d427      	bmi.n	8003e8a <__sflush_r+0xb2>
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	6062      	str	r2, [r4, #4]
 8003e3e:	04d9      	lsls	r1, r3, #19
 8003e40:	6922      	ldr	r2, [r4, #16]
 8003e42:	6022      	str	r2, [r4, #0]
 8003e44:	d504      	bpl.n	8003e50 <__sflush_r+0x78>
 8003e46:	1c42      	adds	r2, r0, #1
 8003e48:	d101      	bne.n	8003e4e <__sflush_r+0x76>
 8003e4a:	682b      	ldr	r3, [r5, #0]
 8003e4c:	b903      	cbnz	r3, 8003e50 <__sflush_r+0x78>
 8003e4e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003e50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003e52:	602f      	str	r7, [r5, #0]
 8003e54:	b1b9      	cbz	r1, 8003e86 <__sflush_r+0xae>
 8003e56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003e5a:	4299      	cmp	r1, r3
 8003e5c:	d002      	beq.n	8003e64 <__sflush_r+0x8c>
 8003e5e:	4628      	mov	r0, r5
 8003e60:	f7ff fec2 	bl	8003be8 <_free_r>
 8003e64:	2300      	movs	r3, #0
 8003e66:	6363      	str	r3, [r4, #52]	@ 0x34
 8003e68:	e00d      	b.n	8003e86 <__sflush_r+0xae>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	4628      	mov	r0, r5
 8003e6e:	47b0      	blx	r6
 8003e70:	4602      	mov	r2, r0
 8003e72:	1c50      	adds	r0, r2, #1
 8003e74:	d1c9      	bne.n	8003e0a <__sflush_r+0x32>
 8003e76:	682b      	ldr	r3, [r5, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d0c6      	beq.n	8003e0a <__sflush_r+0x32>
 8003e7c:	2b1d      	cmp	r3, #29
 8003e7e:	d001      	beq.n	8003e84 <__sflush_r+0xac>
 8003e80:	2b16      	cmp	r3, #22
 8003e82:	d11e      	bne.n	8003ec2 <__sflush_r+0xea>
 8003e84:	602f      	str	r7, [r5, #0]
 8003e86:	2000      	movs	r0, #0
 8003e88:	e022      	b.n	8003ed0 <__sflush_r+0xf8>
 8003e8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e8e:	b21b      	sxth	r3, r3
 8003e90:	e01b      	b.n	8003eca <__sflush_r+0xf2>
 8003e92:	690f      	ldr	r7, [r1, #16]
 8003e94:	2f00      	cmp	r7, #0
 8003e96:	d0f6      	beq.n	8003e86 <__sflush_r+0xae>
 8003e98:	0793      	lsls	r3, r2, #30
 8003e9a:	680e      	ldr	r6, [r1, #0]
 8003e9c:	bf08      	it	eq
 8003e9e:	694b      	ldreq	r3, [r1, #20]
 8003ea0:	600f      	str	r7, [r1, #0]
 8003ea2:	bf18      	it	ne
 8003ea4:	2300      	movne	r3, #0
 8003ea6:	eba6 0807 	sub.w	r8, r6, r7
 8003eaa:	608b      	str	r3, [r1, #8]
 8003eac:	f1b8 0f00 	cmp.w	r8, #0
 8003eb0:	dde9      	ble.n	8003e86 <__sflush_r+0xae>
 8003eb2:	6a21      	ldr	r1, [r4, #32]
 8003eb4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003eb6:	4643      	mov	r3, r8
 8003eb8:	463a      	mov	r2, r7
 8003eba:	4628      	mov	r0, r5
 8003ebc:	47b0      	blx	r6
 8003ebe:	2800      	cmp	r0, #0
 8003ec0:	dc08      	bgt.n	8003ed4 <__sflush_r+0xfc>
 8003ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ec6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003eca:	81a3      	strh	r3, [r4, #12]
 8003ecc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ed4:	4407      	add	r7, r0
 8003ed6:	eba8 0800 	sub.w	r8, r8, r0
 8003eda:	e7e7      	b.n	8003eac <__sflush_r+0xd4>
 8003edc:	dfbffffe 	.word	0xdfbffffe

08003ee0 <_fflush_r>:
 8003ee0:	b538      	push	{r3, r4, r5, lr}
 8003ee2:	690b      	ldr	r3, [r1, #16]
 8003ee4:	4605      	mov	r5, r0
 8003ee6:	460c      	mov	r4, r1
 8003ee8:	b913      	cbnz	r3, 8003ef0 <_fflush_r+0x10>
 8003eea:	2500      	movs	r5, #0
 8003eec:	4628      	mov	r0, r5
 8003eee:	bd38      	pop	{r3, r4, r5, pc}
 8003ef0:	b118      	cbz	r0, 8003efa <_fflush_r+0x1a>
 8003ef2:	6a03      	ldr	r3, [r0, #32]
 8003ef4:	b90b      	cbnz	r3, 8003efa <_fflush_r+0x1a>
 8003ef6:	f7ff fc8f 	bl	8003818 <__sinit>
 8003efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0f3      	beq.n	8003eea <_fflush_r+0xa>
 8003f02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003f04:	07d0      	lsls	r0, r2, #31
 8003f06:	d404      	bmi.n	8003f12 <_fflush_r+0x32>
 8003f08:	0599      	lsls	r1, r3, #22
 8003f0a:	d402      	bmi.n	8003f12 <_fflush_r+0x32>
 8003f0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f0e:	f7ff fe68 	bl	8003be2 <__retarget_lock_acquire_recursive>
 8003f12:	4628      	mov	r0, r5
 8003f14:	4621      	mov	r1, r4
 8003f16:	f7ff ff5f 	bl	8003dd8 <__sflush_r>
 8003f1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003f1c:	07da      	lsls	r2, r3, #31
 8003f1e:	4605      	mov	r5, r0
 8003f20:	d4e4      	bmi.n	8003eec <_fflush_r+0xc>
 8003f22:	89a3      	ldrh	r3, [r4, #12]
 8003f24:	059b      	lsls	r3, r3, #22
 8003f26:	d4e1      	bmi.n	8003eec <_fflush_r+0xc>
 8003f28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f2a:	f7ff fe5b 	bl	8003be4 <__retarget_lock_release_recursive>
 8003f2e:	e7dd      	b.n	8003eec <_fflush_r+0xc>

08003f30 <__swhatbuf_r>:
 8003f30:	b570      	push	{r4, r5, r6, lr}
 8003f32:	460c      	mov	r4, r1
 8003f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f38:	2900      	cmp	r1, #0
 8003f3a:	b096      	sub	sp, #88	@ 0x58
 8003f3c:	4615      	mov	r5, r2
 8003f3e:	461e      	mov	r6, r3
 8003f40:	da0d      	bge.n	8003f5e <__swhatbuf_r+0x2e>
 8003f42:	89a3      	ldrh	r3, [r4, #12]
 8003f44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003f48:	f04f 0100 	mov.w	r1, #0
 8003f4c:	bf14      	ite	ne
 8003f4e:	2340      	movne	r3, #64	@ 0x40
 8003f50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003f54:	2000      	movs	r0, #0
 8003f56:	6031      	str	r1, [r6, #0]
 8003f58:	602b      	str	r3, [r5, #0]
 8003f5a:	b016      	add	sp, #88	@ 0x58
 8003f5c:	bd70      	pop	{r4, r5, r6, pc}
 8003f5e:	466a      	mov	r2, sp
 8003f60:	f000 f848 	bl	8003ff4 <_fstat_r>
 8003f64:	2800      	cmp	r0, #0
 8003f66:	dbec      	blt.n	8003f42 <__swhatbuf_r+0x12>
 8003f68:	9901      	ldr	r1, [sp, #4]
 8003f6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003f6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003f72:	4259      	negs	r1, r3
 8003f74:	4159      	adcs	r1, r3
 8003f76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f7a:	e7eb      	b.n	8003f54 <__swhatbuf_r+0x24>

08003f7c <__smakebuf_r>:
 8003f7c:	898b      	ldrh	r3, [r1, #12]
 8003f7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f80:	079d      	lsls	r5, r3, #30
 8003f82:	4606      	mov	r6, r0
 8003f84:	460c      	mov	r4, r1
 8003f86:	d507      	bpl.n	8003f98 <__smakebuf_r+0x1c>
 8003f88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003f8c:	6023      	str	r3, [r4, #0]
 8003f8e:	6123      	str	r3, [r4, #16]
 8003f90:	2301      	movs	r3, #1
 8003f92:	6163      	str	r3, [r4, #20]
 8003f94:	b003      	add	sp, #12
 8003f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f98:	ab01      	add	r3, sp, #4
 8003f9a:	466a      	mov	r2, sp
 8003f9c:	f7ff ffc8 	bl	8003f30 <__swhatbuf_r>
 8003fa0:	9f00      	ldr	r7, [sp, #0]
 8003fa2:	4605      	mov	r5, r0
 8003fa4:	4639      	mov	r1, r7
 8003fa6:	4630      	mov	r0, r6
 8003fa8:	f7ff fe8a 	bl	8003cc0 <_malloc_r>
 8003fac:	b948      	cbnz	r0, 8003fc2 <__smakebuf_r+0x46>
 8003fae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fb2:	059a      	lsls	r2, r3, #22
 8003fb4:	d4ee      	bmi.n	8003f94 <__smakebuf_r+0x18>
 8003fb6:	f023 0303 	bic.w	r3, r3, #3
 8003fba:	f043 0302 	orr.w	r3, r3, #2
 8003fbe:	81a3      	strh	r3, [r4, #12]
 8003fc0:	e7e2      	b.n	8003f88 <__smakebuf_r+0xc>
 8003fc2:	89a3      	ldrh	r3, [r4, #12]
 8003fc4:	6020      	str	r0, [r4, #0]
 8003fc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fca:	81a3      	strh	r3, [r4, #12]
 8003fcc:	9b01      	ldr	r3, [sp, #4]
 8003fce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003fd2:	b15b      	cbz	r3, 8003fec <__smakebuf_r+0x70>
 8003fd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fd8:	4630      	mov	r0, r6
 8003fda:	f000 f81d 	bl	8004018 <_isatty_r>
 8003fde:	b128      	cbz	r0, 8003fec <__smakebuf_r+0x70>
 8003fe0:	89a3      	ldrh	r3, [r4, #12]
 8003fe2:	f023 0303 	bic.w	r3, r3, #3
 8003fe6:	f043 0301 	orr.w	r3, r3, #1
 8003fea:	81a3      	strh	r3, [r4, #12]
 8003fec:	89a3      	ldrh	r3, [r4, #12]
 8003fee:	431d      	orrs	r5, r3
 8003ff0:	81a5      	strh	r5, [r4, #12]
 8003ff2:	e7cf      	b.n	8003f94 <__smakebuf_r+0x18>

08003ff4 <_fstat_r>:
 8003ff4:	b538      	push	{r3, r4, r5, lr}
 8003ff6:	4d07      	ldr	r5, [pc, #28]	@ (8004014 <_fstat_r+0x20>)
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	4604      	mov	r4, r0
 8003ffc:	4608      	mov	r0, r1
 8003ffe:	4611      	mov	r1, r2
 8004000:	602b      	str	r3, [r5, #0]
 8004002:	f7fc fc00 	bl	8000806 <_fstat>
 8004006:	1c43      	adds	r3, r0, #1
 8004008:	d102      	bne.n	8004010 <_fstat_r+0x1c>
 800400a:	682b      	ldr	r3, [r5, #0]
 800400c:	b103      	cbz	r3, 8004010 <_fstat_r+0x1c>
 800400e:	6023      	str	r3, [r4, #0]
 8004010:	bd38      	pop	{r3, r4, r5, pc}
 8004012:	bf00      	nop
 8004014:	2000025c 	.word	0x2000025c

08004018 <_isatty_r>:
 8004018:	b538      	push	{r3, r4, r5, lr}
 800401a:	4d06      	ldr	r5, [pc, #24]	@ (8004034 <_isatty_r+0x1c>)
 800401c:	2300      	movs	r3, #0
 800401e:	4604      	mov	r4, r0
 8004020:	4608      	mov	r0, r1
 8004022:	602b      	str	r3, [r5, #0]
 8004024:	f7fc fbff 	bl	8000826 <_isatty>
 8004028:	1c43      	adds	r3, r0, #1
 800402a:	d102      	bne.n	8004032 <_isatty_r+0x1a>
 800402c:	682b      	ldr	r3, [r5, #0]
 800402e:	b103      	cbz	r3, 8004032 <_isatty_r+0x1a>
 8004030:	6023      	str	r3, [r4, #0]
 8004032:	bd38      	pop	{r3, r4, r5, pc}
 8004034:	2000025c 	.word	0x2000025c

08004038 <_sbrk_r>:
 8004038:	b538      	push	{r3, r4, r5, lr}
 800403a:	4d06      	ldr	r5, [pc, #24]	@ (8004054 <_sbrk_r+0x1c>)
 800403c:	2300      	movs	r3, #0
 800403e:	4604      	mov	r4, r0
 8004040:	4608      	mov	r0, r1
 8004042:	602b      	str	r3, [r5, #0]
 8004044:	f7fc fc08 	bl	8000858 <_sbrk>
 8004048:	1c43      	adds	r3, r0, #1
 800404a:	d102      	bne.n	8004052 <_sbrk_r+0x1a>
 800404c:	682b      	ldr	r3, [r5, #0]
 800404e:	b103      	cbz	r3, 8004052 <_sbrk_r+0x1a>
 8004050:	6023      	str	r3, [r4, #0]
 8004052:	bd38      	pop	{r3, r4, r5, pc}
 8004054:	2000025c 	.word	0x2000025c

08004058 <_init>:
 8004058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405a:	bf00      	nop
 800405c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800405e:	bc08      	pop	{r3}
 8004060:	469e      	mov	lr, r3
 8004062:	4770      	bx	lr

08004064 <_fini>:
 8004064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004066:	bf00      	nop
 8004068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800406a:	bc08      	pop	{r3}
 800406c:	469e      	mov	lr, r3
 800406e:	4770      	bx	lr
